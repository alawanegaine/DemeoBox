

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May  5 15:48:14 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    21  0000                     _ADCON1bits	set	4033
    22  0000                     _INTCONbits	set	4082
    23  0000                     _OSCCONbits	set	4051
    24  0000                     _OSCTUNEbits	set	3995
    25  0000                     _PIE1bits	set	3997
    26  0000                     _PIR1bits	set	3998
    27  0000                     _PORTAbits	set	3968
    28  0000                     _RCREG	set	4014
    29  0000                     _RCSTAbits	set	4011
    30  0000                     _SPBRG	set	4015
    31  0000                     _TRISAbits	set	3986
    32  0000                     _TRISBbits	set	3987
    33  0000                     _TRISCbits	set	3988
    34  0000                     _TXREG	set	4013
    35  0000                     _TXSTAbits	set	4012
    36  0000                     _RCIF	set	31989
    37  0000                     _TRMT	set	32097
    38                           
    39                           ; 0 bytes @ 0x1F
    40 ;;
    41 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    42 ;;
    43 ;; *************** function _main *****************
    44 ;; Defined at:
    45 ;;		line 202 in file "main.c"
    46 ;; Parameters:    Size  Location     Type
    47 ;;  argc            2   26[COMRAM] int 
    48 ;;  argv            3   28[COMRAM] PTR PTR unsigned char 
    49 ;; Auto vars:     Size  Location     Type
    50 ;;		None
    51 ;; Return value:  Size  Location     Type
    52 ;;                  2   26[COMRAM] int 
    53 ;; Registers used:
    54 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
    55 ;; Tracked objects:
    56 ;;		On entry : 0/0
    57 ;;		On exit  : 0/0
    58 ;;		Unchanged: 0/0
    59 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
    60 ;;      Params:         5       0       0       0       0       0       0
    61 ;;      Locals:         0       0       0       0       0       0       0
    62 ;;      Temps:          0       0       0       0       0       0       0
    63 ;;      Totals:         5       0       0       0       0       0       0
    64 ;;Total ram usage:        5 bytes
    65 ;; Hardware stack levels required when called:    5
    66 ;; This function calls:
    67 ;;		___awmod
    68 ;;		_init_IOPin
    69 ;;		_init_USART
    70 ;;		_parseMessage
    71 ;; This function is called by:
    72 ;;		Startup code after reset
    73 ;; This function uses a non-reentrant model
    74 ;;
    75                           
    76                           	psect	text0
    77  000276                     __ptext0:
    78                           	opt stack 0
    79  000276                     _main:
    80                           	opt stack 26
    81                           
    82                           ;main.c: 204: OSCCONbits.IRCF = 0b111 ;
    83                           
    84                           ;incstack = 0
    85  000276  88D3               	bsf	4051,4,c	;volatile
    86  000278  8AD3               	bsf	4051,5,c	;volatile
    87  00027A  8CD3               	bsf	4051,6,c	;volatile
    88                           
    89                           ;main.c: 205: OSCTUNEbits.PLLEN = 1 ;
    90  00027C  8C9B               	bsf	3995,6,c	;volatile
    91                           
    92                           ;main.c: 206: init_USART();
    93  00027E  EC86  F001         	call	_init_USART	;wreg free
    94                           
    95                           ;main.c: 207: init_IOPin();
    96  000282  EC75  F001         	call	_init_IOPin	;wreg free
    97                           
    98                           ;main.c: 209: INTCONbits.PEIE = 1 ;
    99  000286  8CF2               	bsf	intcon,6,c	;volatile
   100                           
   101                           ;main.c: 210: INTCONbits.GIE = 1 ;
   102  000288  8EF2               	bsf	intcon,7,c	;volatile
   103  00028A  D000               	goto	l963
   104  00028C                     l963:
   105                           
   106                           ;main.c: 213: {
   107                           ;main.c: 214: if(iRx%10 == 5){
   108  00028C  C034  F015         	movff	_iRx,___awmod@dividend
   109  000290  C035  F016         	movff	_iRx+1,___awmod@dividend+1
   110  000294  0E00               	movlw	0
   111  000296  6E18               	movwf	___awmod@divisor+1,c
   112  000298  0E0A               	movlw	10
   113  00029A  6E17               	movwf	___awmod@divisor,c
   114  00029C  ECB9  F000         	call	___awmod	;wreg free
   115  0002A0  0E05               	movlw	5
   116  0002A2  1815               	xorwf	?___awmod,w,c
   117  0002A4  1016               	iorwf	?___awmod+1,w,c
   118  0002A6  A4D8               	btfss	status,2,c
   119  0002A8  D7F1               	goto	l963
   120                           
   121                           ;main.c: 215: parseMessage();
   122  0002AA  EC0E  F000         	call	_parseMessage	;wreg free
   123  0002AE  D7EE               	goto	l963
   124                           
   125                           ;main.c: 216: }
   126                           ;main.c: 217: }
   127                           ;main.c: 219: return 0;
   128                           ;	Return value of _main is never used
   129  0002B0  EF0C  F000         	goto	start
   130  0002B4                     __end_of_main:
   131                           	opt stack 0
   132                           intcon	equ	0xFF2
   133                           status	equ	0xFD8
   134                           
   135                           	psect	cinit
   136  000320                     __pcinit:
   137                           	opt stack 0
   138  000320                     start_initialization:
   139                           	opt stack 0
   140  000320                     __initialization:
   141                           	opt stack 0
   142                           
   143                           ; Clear objects allocated to COMRAM (30 bytes)
   144  000320  EE00  F020         	lfsr	0,__pbssCOMRAM
   145  000324  0E1E               	movlw	30
   146  000326                     clear_0:
   147  000326  6AEE               	clrf	postinc0,c
   148  000328  06E8               	decf	wreg,f,c
   149  00032A  E1FD               	bnz	clear_0
   150  00032C                     end_of_initialization:
   151                           	opt stack 0
   152  00032C                     __end_of__initialization:
   153                           	opt stack 0
   154  00032C  0100               	movlb	0
   155  00032E  EF3B  F001         	goto	_main	;jump to C main() function
   156                           intcon	equ	0xFF2
   157                           postinc0	equ	0xFEE
   158                           wreg	equ	0xFE8
   159                           status	equ	0xFD8
   160                           
   161                           	psect	bssCOMRAM
   162  000020                     __pbssCOMRAM:
   163                           	opt stack 0
   164  000020                     _RxBuffer:
   165                           	opt stack 0
   166  000020                     	ds	10
   167  00002A                     _TxBuffer:
   168                           	opt stack 0
   169  00002A                     	ds	10
   170  000034                     _iRx:
   171                           	opt stack 0
   172  000034                     	ds	2
   173  000036                     _iRxLecture:
   174                           	opt stack 0
   175  000036                     	ds	2
   176  000038                     _idBroche:
   177                           	opt stack 0
   178  000038                     	ds	2
   179  00003A                     _idModule:
   180                           	opt stack 0
   181  00003A                     	ds	2
   182  00003C                     _valueBroche:
   183                           	opt stack 0
   184  00003C                     	ds	2
   185                           intcon	equ	0xFF2
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           status	equ	0xFD8
   189                           
   190                           	psect	cstackCOMRAM
   191  000001                     __pcstackCOMRAM:
   192                           	opt stack 0
   193  000001                     ?i2___awmod:
   194                           	opt stack 0
   195  000001                     i2___awmod@dividend:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x0
   199  000001                     	ds	2
   200  000003                     i2___awmod@divisor:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x2
   204  000003                     	ds	2
   205  000005                     i2___awmod@counter:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0x4
   209  000005                     	ds	1
   210  000006                     i2___awmod@sign:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x5
   214  000006                     	ds	1
   215  000007                     ??_ISR:
   216                           
   217                           ; 0 bytes @ 0x6
   218  000007                     	ds	14
   219  000015                     ?___awmod:
   220                           	opt stack 0
   221  000015                     UART_Write@data:
   222                           	opt stack 0
   223  000015                     ___awmod@dividend:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x14
   227  000015                     	ds	1
   228  000016                     UART_Write_Text@text:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x15
   232  000016                     	ds	1
   233  000017                     ___awmod@divisor:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x16
   237  000017                     	ds	1
   238  000018                     UART_Write_Text@i:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x17
   242  000018                     	ds	1
   243  000019                     ___awmod@counter:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x18
   247  000019                     	ds	1
   248  00001A                     ___awmod@sign:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x19
   252  00001A                     	ds	1
   253  00001B                     
   254                           ; 2 bytes @ 0x1A
   255  00001B                     	ds	2
   256  00001D                     
   257                           ; 3 bytes @ 0x1C
   258  00001D                     	ds	3
   259  000020                     intcon	equ	0xFF2
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           status	equ	0xFD8
   263                           
   264 ;; *************** function _parseMessage *****************
   265 ;; Defined at:
   266 ;;		line 187 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;		None
   271 ;; Return value:  Size  Location     Type
   272 ;;		None               void
   273 ;; Registers used:
   274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : 0/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   280 ;;      Params:         0       0       0       0       0       0       0
   281 ;;      Locals:         0       0       0       0       0       0       0
   282 ;;      Temps:          0       0       0       0       0       0       0
   283 ;;      Totals:         0       0       0       0       0       0       0
   284 ;;Total ram usage:        0 bytes
   285 ;; Hardware stack levels used:    1
   286 ;; Hardware stack levels required when called:    4
   287 ;; This function calls:
   288 ;;		_UART_Write
   289 ;;		_UART_Write_Text
   290 ;;		___awmod
   291 ;; This function is called by:
   292 ;;		_main
   293 ;; This function uses a non-reentrant model
   294 ;;
   295                           
   296                           	psect	text1
   297  00001C                     __ptext1:
   298                           	opt stack 0
   299  00001C                     _parseMessage:
   300                           	opt stack 26
   301                           
   302                           ;main.c: 188: idModule[0] = RxBuffer[iRxLecture%10];
   303                           
   304                           ;incstack = 0
   305  00001C  C036  F015         	movff	_iRxLecture,___awmod@dividend
   306  000020  C037  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   307  000024  0E00               	movlw	0
   308  000026  6E18               	movwf	___awmod@divisor+1,c
   309  000028  0E0A               	movlw	10
   310  00002A  6E17               	movwf	___awmod@divisor,c
   311  00002C  ECB9  F000         	call	___awmod	;wreg free
   312  000030  0E20               	movlw	low _RxBuffer
   313  000032  2415               	addwf	?___awmod,w,c
   314  000034  6ED9               	movwf	fsr2l,c
   315  000036  0E00               	movlw	high _RxBuffer
   316  000038  2016               	addwfc	?___awmod+1,w,c
   317  00003A  6EDA               	movwf	fsr2h,c
   318  00003C  50DF               	movf	indf2,w,c
   319  00003E  6E3A               	movwf	_idModule,c
   320                           
   321                           ;main.c: 189: iRxLecture += 2 ;
   322  000040  0E02               	movlw	2
   323  000042  2636               	addwf	_iRxLecture,f,c
   324  000044  0E00               	movlw	0
   325  000046  2237               	addwfc	_iRxLecture+1,f,c
   326                           
   327                           ;main.c: 190: idBroche[0] = RxBuffer[iRxLecture%10];
   328  000048  C036  F015         	movff	_iRxLecture,___awmod@dividend
   329  00004C  C037  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   330  000050  0E00               	movlw	0
   331  000052  6E18               	movwf	___awmod@divisor+1,c
   332  000054  0E0A               	movlw	10
   333  000056  6E17               	movwf	___awmod@divisor,c
   334  000058  ECB9  F000         	call	___awmod	;wreg free
   335  00005C  0E20               	movlw	low _RxBuffer
   336  00005E  2415               	addwf	?___awmod,w,c
   337  000060  6ED9               	movwf	fsr2l,c
   338  000062  0E00               	movlw	high _RxBuffer
   339  000064  2016               	addwfc	?___awmod+1,w,c
   340  000066  6EDA               	movwf	fsr2h,c
   341  000068  50DF               	movf	indf2,w,c
   342  00006A  6E38               	movwf	_idBroche,c
   343                           
   344                           ;main.c: 191: iRxLecture += 2 ;
   345  00006C  0E02               	movlw	2
   346  00006E  2636               	addwf	_iRxLecture,f,c
   347  000070  0E00               	movlw	0
   348  000072  2237               	addwfc	_iRxLecture+1,f,c
   349                           
   350                           ;main.c: 192: valueBroche[0] = RxBuffer[iRxLecture%10];
   351  000074  C036  F015         	movff	_iRxLecture,___awmod@dividend
   352  000078  C037  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   353  00007C  0E00               	movlw	0
   354  00007E  6E18               	movwf	___awmod@divisor+1,c
   355  000080  0E0A               	movlw	10
   356  000082  6E17               	movwf	___awmod@divisor,c
   357  000084  ECB9  F000         	call	___awmod	;wreg free
   358  000088  0E20               	movlw	low _RxBuffer
   359  00008A  2415               	addwf	?___awmod,w,c
   360  00008C  6ED9               	movwf	fsr2l,c
   361  00008E  0E00               	movlw	high _RxBuffer
   362  000090  2016               	addwfc	?___awmod+1,w,c
   363  000092  6EDA               	movwf	fsr2h,c
   364  000094  50DF               	movf	indf2,w,c
   365  000096  6E3C               	movwf	_valueBroche,c
   366                           
   367                           ;main.c: 193: iRxLecture += 2 ;
   368  000098  0E02               	movlw	2
   369  00009A  2636               	addwf	_iRxLecture,f,c
   370  00009C  0E00               	movlw	0
   371  00009E  2237               	addwfc	_iRxLecture+1,f,c
   372                           
   373                           ;main.c: 194: UART_Write('M') ;
   374  0000A0  0E4D               	movlw	77
   375  0000A2  EC99  F001         	call	_UART_Write
   376                           
   377                           ;main.c: 195: UART_Write_Text(idModule);
   378  0000A6  0E3A               	movlw	low _idModule
   379  0000A8  6E16               	movwf	UART_Write_Text@text,c
   380  0000AA  0E00               	movlw	high _idModule
   381  0000AC  6E17               	movwf	UART_Write_Text@text+1,c
   382  0000AE  EC5A  F001         	call	_UART_Write_Text	;wreg free
   383                           
   384                           ;main.c: 196: UART_Write('B') ;
   385  0000B2  0E42               	movlw	66
   386  0000B4  EC99  F001         	call	_UART_Write
   387                           
   388                           ;main.c: 197: UART_Write_Text(idBroche);
   389  0000B8  0E38               	movlw	low _idBroche
   390  0000BA  6E16               	movwf	UART_Write_Text@text,c
   391  0000BC  0E00               	movlw	high _idBroche
   392  0000BE  6E17               	movwf	UART_Write_Text@text+1,c
   393  0000C0  EC5A  F001         	call	_UART_Write_Text	;wreg free
   394                           
   395                           ;main.c: 198: UART_Write('V') ;
   396  0000C4  0E56               	movlw	86
   397  0000C6  EC99  F001         	call	_UART_Write
   398                           
   399                           ;main.c: 199: UART_Write_Text(valueBroche);
   400  0000CA  0E3C               	movlw	low _valueBroche
   401  0000CC  6E16               	movwf	UART_Write_Text@text,c
   402  0000CE  0E00               	movlw	high _valueBroche
   403  0000D0  6E17               	movwf	UART_Write_Text@text+1,c
   404  0000D2  EC5A  F001         	call	_UART_Write_Text	;wreg free
   405  0000D6  0012               	return		;funcret
   406  0000D8                     __end_of_parseMessage:
   407                           	opt stack 0
   408                           intcon	equ	0xFF2
   409                           postinc0	equ	0xFEE
   410                           wreg	equ	0xFE8
   411                           indf2	equ	0xFDF
   412                           fsr2h	equ	0xFDA
   413                           fsr2l	equ	0xFD9
   414                           status	equ	0xFD8
   415                           
   416 ;; *************** function ___awmod *****************
   417 ;; Defined at:
   418 ;;		line 8 in file "/Applications/microchip/xc8/v1.34/sources/common/awmod.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;  dividend        2   20[COMRAM] int 
   421 ;;  divisor         2   22[COMRAM] int 
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  sign            1   25[COMRAM] unsigned char 
   424 ;;  counter         1   24[COMRAM] unsigned char 
   425 ;; Return value:  Size  Location     Type
   426 ;;                  2   20[COMRAM] int 
   427 ;; Registers used:
   428 ;;		wreg, status,2, status,0
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   434 ;;      Params:         4       0       0       0       0       0       0
   435 ;;      Locals:         2       0       0       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0       0       0
   437 ;;      Totals:         6       0       0       0       0       0       0
   438 ;;Total ram usage:        6 bytes
   439 ;; Hardware stack levels used:    1
   440 ;; Hardware stack levels required when called:    2
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_parseMessage
   445 ;;		_main
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text2
   450  000172                     __ptext2:
   451                           	opt stack 0
   452  000172                     ___awmod:
   453                           	opt stack 27
   454                           
   455                           ;incstack = 0
   456  000172  0E00               	movlw	0
   457  000174  6E1A               	movwf	___awmod@sign,c
   458  000176  AE16               	btfss	___awmod@dividend+1,7,c
   459  000178  D007               	goto	l871
   460  00017A  6C15               	negf	___awmod@dividend,c
   461  00017C  1E16               	comf	___awmod@dividend+1,f,c
   462  00017E  B0D8               	btfsc	status,0,c
   463  000180  2A16               	incf	___awmod@dividend+1,f,c
   464  000182  0E01               	movlw	1
   465  000184  6E1A               	movwf	___awmod@sign,c
   466  000186  D000               	goto	l871
   467  000188                     l871:
   468  000188  AE18               	btfss	___awmod@divisor+1,7,c
   469  00018A  D005               	goto	l875
   470  00018C  6C17               	negf	___awmod@divisor,c
   471  00018E  1E18               	comf	___awmod@divisor+1,f,c
   472  000190  B0D8               	btfsc	status,0,c
   473  000192  2A18               	incf	___awmod@divisor+1,f,c
   474  000194  D000               	goto	l875
   475  000196                     l875:
   476  000196  5017               	movf	___awmod@divisor,w,c
   477  000198  1018               	iorwf	___awmod@divisor+1,w,c
   478  00019A  B4D8               	btfsc	status,2,c
   479  00019C  D01D               	goto	l891
   480  00019E  0E01               	movlw	1
   481  0001A0  6E19               	movwf	___awmod@counter,c
   482  0001A2  D005               	goto	l881
   483  0001A4                     l879:
   484  0001A4  90D8               	bcf	status,0,c
   485  0001A6  3617               	rlcf	___awmod@divisor,f,c
   486  0001A8  3618               	rlcf	___awmod@divisor+1,f,c
   487  0001AA  2A19               	incf	___awmod@counter,f,c
   488  0001AC  D000               	goto	l881
   489  0001AE                     l881:
   490  0001AE  BE18               	btfsc	___awmod@divisor+1,7,c
   491  0001B0  D002               	goto	l883
   492  0001B2  D7F8               	goto	l879
   493  0001B4  D000               	goto	l883
   494  0001B6                     l883:
   495  0001B6  5017               	movf	___awmod@divisor,w,c
   496  0001B8  5C15               	subwf	___awmod@dividend,w,c
   497  0001BA  5018               	movf	___awmod@divisor+1,w,c
   498  0001BC  5816               	subwfb	___awmod@dividend+1,w,c
   499  0001BE  A0D8               	btfss	status,0,c
   500  0001C0  D005               	goto	l887
   501  0001C2  5017               	movf	___awmod@divisor,w,c
   502  0001C4  5E15               	subwf	___awmod@dividend,f,c
   503  0001C6  5018               	movf	___awmod@divisor+1,w,c
   504  0001C8  5A16               	subwfb	___awmod@dividend+1,f,c
   505  0001CA  D000               	goto	l887
   506  0001CC                     l887:
   507  0001CC  90D8               	bcf	status,0,c
   508  0001CE  3218               	rrcf	___awmod@divisor+1,f,c
   509  0001D0  3217               	rrcf	___awmod@divisor,f,c
   510  0001D2  2E19               	decfsz	___awmod@counter,f,c
   511  0001D4  D7F0               	goto	l883
   512  0001D6  D000               	goto	l891
   513  0001D8                     l891:
   514  0001D8  501A               	movf	___awmod@sign,w,c
   515  0001DA  B4D8               	btfsc	status,2,c
   516  0001DC  D005               	goto	l895
   517  0001DE  6C15               	negf	___awmod@dividend,c
   518  0001E0  1E16               	comf	___awmod@dividend+1,f,c
   519  0001E2  B0D8               	btfsc	status,0,c
   520  0001E4  2A16               	incf	___awmod@dividend+1,f,c
   521  0001E6  D000               	goto	l895
   522  0001E8                     l895:
   523  0001E8  C015  F015         	movff	___awmod@dividend,?___awmod
   524  0001EC  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
   525  0001F0  D000               	goto	l310
   526  0001F2                     l310:
   527  0001F2  0012               	return		;funcret
   528  0001F4                     __end_of___awmod:
   529                           	opt stack 0
   530                           intcon	equ	0xFF2
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           indf2	equ	0xFDF
   534                           fsr2h	equ	0xFDA
   535                           fsr2l	equ	0xFD9
   536                           status	equ	0xFD8
   537                           
   538 ;; *************** function _UART_Write_Text *****************
   539 ;; Defined at:
   540 ;;		line 163 in file "main.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;  text            2   21[COMRAM] PTR unsigned char 
   543 ;;		 -> valueBroche(2), idBroche(2), idModule(2), 
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  i               2   23[COMRAM] int 
   546 ;; Return value:  Size  Location     Type
   547 ;;		None               void
   548 ;; Registers used:
   549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   555 ;;      Params:         2       0       0       0       0       0       0
   556 ;;      Locals:         2       0       0       0       0       0       0
   557 ;;      Temps:          0       0       0       0       0       0       0
   558 ;;      Totals:         4       0       0       0       0       0       0
   559 ;;Total ram usage:        4 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; Hardware stack levels required when called:    3
   562 ;; This function calls:
   563 ;;		_UART_Write
   564 ;; This function is called by:
   565 ;;		_parseMessage
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text3
   570  0002B4                     __ptext3:
   571                           	opt stack 0
   572  0002B4                     _UART_Write_Text:
   573                           	opt stack 26
   574                           
   575                           ;main.c: 165: int i;
   576                           ;main.c: 166: for(i=0;text[i]!='\0';i++)
   577                           
   578                           ;incstack = 0
   579  0002B4  0E00               	movlw	0
   580  0002B6  6E19               	movwf	UART_Write_Text@i+1,c
   581  0002B8  0E00               	movlw	0
   582  0002BA  6E18               	movwf	UART_Write_Text@i,c
   583  0002BC  D00C               	goto	l861
   584  0002BE                     l857:
   585                           
   586                           ;main.c: 167: UART_Write(text[i]);
   587  0002BE  5018               	movf	UART_Write_Text@i,w,c
   588  0002C0  2416               	addwf	UART_Write_Text@text,w,c
   589  0002C2  6ED9               	movwf	fsr2l,c
   590  0002C4  5019               	movf	UART_Write_Text@i+1,w,c
   591  0002C6  2017               	addwfc	UART_Write_Text@text+1,w,c
   592  0002C8  6EDA               	movwf	fsr2h,c
   593  0002CA  50DF               	movf	indf2,w,c
   594  0002CC  EC99  F001         	call	_UART_Write
   595  0002D0  4A18               	infsnz	UART_Write_Text@i,f,c
   596  0002D2  2A19               	incf	UART_Write_Text@i+1,f,c
   597  0002D4  D000               	goto	l861
   598  0002D6                     l861:
   599  0002D6  5018               	movf	UART_Write_Text@i,w,c
   600  0002D8  2416               	addwf	UART_Write_Text@text,w,c
   601  0002DA  6ED9               	movwf	fsr2l,c
   602  0002DC  5019               	movf	UART_Write_Text@i+1,w,c
   603  0002DE  2017               	addwfc	UART_Write_Text@text+1,w,c
   604  0002E0  6EDA               	movwf	fsr2h,c
   605  0002E2  50DF               	movf	indf2,w,c
   606  0002E4  A4D8               	btfss	status,2,c
   607  0002E6  D7EB               	goto	l857
   608  0002E8  0012               	return		;funcret
   609  0002EA                     __end_of_UART_Write_Text:
   610                           	opt stack 0
   611                           intcon	equ	0xFF2
   612                           postinc0	equ	0xFEE
   613                           wreg	equ	0xFE8
   614                           indf2	equ	0xFDF
   615                           fsr2h	equ	0xFDA
   616                           fsr2l	equ	0xFD9
   617                           status	equ	0xFD8
   618                           
   619 ;; *************** function _UART_Write *****************
   620 ;; Defined at:
   621 ;;		line 157 in file "main.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;  data            1    wreg     unsigned char 
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  data            1   20[COMRAM] unsigned char 
   626 ;; Return value:  Size  Location     Type
   627 ;;		None               void
   628 ;; Registers used:
   629 ;;		wreg
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   635 ;;      Params:         0       0       0       0       0       0       0
   636 ;;      Locals:         1       0       0       0       0       0       0
   637 ;;      Temps:          0       0       0       0       0       0       0
   638 ;;      Totals:         1       0       0       0       0       0       0
   639 ;;Total ram usage:        1 bytes
   640 ;; Hardware stack levels used:    1
   641 ;; Hardware stack levels required when called:    2
   642 ;; This function calls:
   643 ;;		Nothing
   644 ;; This function is called by:
   645 ;;		_UART_Write_Text
   646 ;;		_parseMessage
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text4
   651  000332                     __ptext4:
   652                           	opt stack 0
   653  000332                     _UART_Write:
   654                           	opt stack 26
   655                           
   656                           ;incstack = 0
   657                           ;UART_Write@data stored from wreg
   658  000332  6E15               	movwf	UART_Write@data,c
   659                           
   660                           ;main.c: 159: while(!TRMT);
   661  000334  D000               	goto	l71
   662  000336                     l71:
   663  000336  A2AC               	btfss	4012,1,c	;volatile
   664  000338  D7FE               	goto	l71
   665                           
   666                           ;main.c: 160: TXREG = data;
   667  00033A  C015  FFAD         	movff	UART_Write@data,4013	;volatile
   668  00033E  0012               	return		;funcret
   669  000340                     __end_of_UART_Write:
   670                           	opt stack 0
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           indf2	equ	0xFDF
   675                           fsr2h	equ	0xFDA
   676                           fsr2l	equ	0xFD9
   677                           status	equ	0xFD8
   678                           
   679 ;; *************** function _init_USART *****************
   680 ;; Defined at:
   681 ;;		line 114 in file "main.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;		None               void
   688 ;; Registers used:
   689 ;;		wreg, status,2
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   695 ;;      Params:         0       0       0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    2
   702 ;; This function calls:
   703 ;;		Nothing
   704 ;; This function is called by:
   705 ;;		_main
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           	psect	text5
   710  00030C                     __ptext5:
   711                           	opt stack 0
   712  00030C                     _init_USART:
   713                           	opt stack 28
   714                           
   715                           ;main.c: 115: TXSTAbits.TXEN = 1 ;
   716                           
   717                           ;incstack = 0
   718  00030C  8AAC               	bsf	4012,5,c	;volatile
   719                           
   720                           ;main.c: 116: TXSTAbits.BRGH = 1 ;
   721  00030E  84AC               	bsf	4012,2,c	;volatile
   722                           
   723                           ;main.c: 117: RCSTAbits.CREN = 1 ;
   724  000310  88AB               	bsf	4011,4,c	;volatile
   725                           
   726                           ;main.c: 121: TRISCbits.RC7 = 1 ;
   727  000312  8E94               	bsf	3988,7,c	;volatile
   728                           
   729                           ;main.c: 122: TRISCbits.RC6 = 0 ;
   730  000314  9C94               	bcf	3988,6,c	;volatile
   731                           
   732                           ;main.c: 124: SPBRG = 51 ;
   733  000316  0E33               	movlw	51
   734  000318  6EAF               	movwf	4015,c	;volatile
   735                           
   736                           ;main.c: 126: PIE1bits.RCIE = 1 ;
   737  00031A  8A9D               	bsf	3997,5,c	;volatile
   738                           
   739                           ;main.c: 127: RCSTAbits.SPEN = 1 ;
   740  00031C  8EAB               	bsf	4011,7,c	;volatile
   741  00031E  0012               	return		;funcret
   742  000320                     __end_of_init_USART:
   743                           	opt stack 0
   744                           intcon	equ	0xFF2
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           indf2	equ	0xFDF
   748                           fsr2h	equ	0xFDA
   749                           fsr2l	equ	0xFD9
   750                           status	equ	0xFD8
   751                           
   752 ;; *************** function _init_IOPin *****************
   753 ;; Defined at:
   754 ;;		line 130 in file "main.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;		None
   759 ;; Return value:  Size  Location     Type
   760 ;;		None               void
   761 ;; Registers used:
   762 ;;		None
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   768 ;;      Params:         0       0       0       0       0       0       0
   769 ;;      Locals:         0       0       0       0       0       0       0
   770 ;;      Temps:          0       0       0       0       0       0       0
   771 ;;      Totals:         0       0       0       0       0       0       0
   772 ;;Total ram usage:        0 bytes
   773 ;; Hardware stack levels used:    1
   774 ;; Hardware stack levels required when called:    2
   775 ;; This function calls:
   776 ;;		Nothing
   777 ;; This function is called by:
   778 ;;		_main
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text6
   783  0002EA                     __ptext6:
   784                           	opt stack 0
   785  0002EA                     _init_IOPin:
   786                           	opt stack 28
   787                           
   788                           ;main.c: 133: ADCON1bits.PCFG = 0b1111 ;
   789                           
   790                           ;incstack = 0
   791  0002EA  80C1               	bsf	4033,0,c	;volatile
   792  0002EC  82C1               	bsf	4033,1,c	;volatile
   793  0002EE  84C1               	bsf	4033,2,c	;volatile
   794  0002F0  86C1               	bsf	4033,3,c	;volatile
   795                           
   796                           ;main.c: 134: TRISAbits.TRISA0 = 1 ;
   797  0002F2  8092               	bsf	3986,0,c	;volatile
   798                           
   799                           ;main.c: 135: TRISAbits.TRISA1 = 1 ;
   800  0002F4  8292               	bsf	3986,1,c	;volatile
   801                           
   802                           ;main.c: 136: TRISAbits.TRISA2 = 1 ;
   803  0002F6  8492               	bsf	3986,2,c	;volatile
   804                           
   805                           ;main.c: 137: TRISAbits.TRISA3 = 1 ;
   806  0002F8  8692               	bsf	3986,3,c	;volatile
   807                           
   808                           ;main.c: 140: TRISCbits.TRISC0 = 0 ;
   809  0002FA  9094               	bcf	3988,0,c	;volatile
   810                           
   811                           ;main.c: 141: TRISCbits.TRISC1 = 0 ;
   812  0002FC  9294               	bcf	3988,1,c	;volatile
   813                           
   814                           ;main.c: 142: TRISCbits.TRISC2 = 0 ;
   815  0002FE  9494               	bcf	3988,2,c	;volatile
   816                           
   817                           ;main.c: 143: TRISCbits.TRISC3 = 0 ;
   818  000300  9694               	bcf	3988,3,c	;volatile
   819                           
   820                           ;main.c: 144: TRISCbits.TRISC4 = 0 ;
   821  000302  9894               	bcf	3988,4,c	;volatile
   822                           
   823                           ;main.c: 145: TRISCbits.TRISC5 = 0 ;
   824  000304  9A94               	bcf	3988,5,c	;volatile
   825                           
   826                           ;main.c: 147: TRISBbits.TRISB0 = 0 ;
   827  000306  9093               	bcf	3987,0,c	;volatile
   828                           
   829                           ;main.c: 148: TRISCbits.TRISC1 = 0 ;
   830  000308  9294               	bcf	3988,1,c	;volatile
   831  00030A  0012               	return		;funcret
   832  00030C                     __end_of_init_IOPin:
   833                           	opt stack 0
   834                           intcon	equ	0xFF2
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           indf2	equ	0xFDF
   838                           fsr2h	equ	0xFDA
   839                           fsr2l	equ	0xFD9
   840                           status	equ	0xFD8
   841                           
   842 ;; *************** function _ISR *****************
   843 ;; Defined at:
   844 ;;		line 222 in file "main.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;		None               void
   851 ;; Registers used:
   852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   858 ;;      Params:         0       0       0       0       0       0       0
   859 ;;      Locals:         0       0       0       0       0       0       0
   860 ;;      Temps:         14       0       0       0       0       0       0
   861 ;;      Totals:        14       0       0       0       0       0       0
   862 ;;Total ram usage:       14 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    1
   865 ;; This function calls:
   866 ;;		_UART_Read
   867 ;;		i2___awmod
   868 ;; This function is called by:
   869 ;;		Interrupt level 2
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	intcode
   874  000008                     __pintcode:
   875                           	opt stack 0
   876  000008                     _ISR:
   877                           	opt stack 26
   878                           
   879                           ;incstack = 0
   880  000008  CFFA F007          	movff	pclath,??_ISR
   881  00000C  CFFB F008          	movff	pclatu,??_ISR+1
   882  000010  CFE9 F009          	movff	fsr0l,??_ISR+2
   883  000014  ED6C  F000         	call	int_func,f	;refresh shadow registers
   884                           pclatu	equ	0xFFB
   885                           pclath	equ	0xFFA
   886                           intcon	equ	0xFF2
   887                           postinc0	equ	0xFEE
   888                           fsr0l	equ	0xFE9
   889                           wreg	equ	0xFE8
   890                           indf2	equ	0xFDF
   891                           fsr2h	equ	0xFDA
   892                           fsr2l	equ	0xFD9
   893                           status	equ	0xFD8
   894                           
   895                           	psect	intcode_body
   896  0000D8                     __pintcode_body:
   897                           	opt stack 26
   898  0000D8                     int_func:
   899                           	opt stack 26
   900  0000D8  0006               	pop		; remove dummy address from shadow register refresh
   901  0000DA  CFEA F00A          	movff	fsr0h,??_ISR+3
   902  0000DE  CFE1 F00B          	movff	fsr1l,??_ISR+4
   903  0000E2  CFE2 F00C          	movff	fsr1h,??_ISR+5
   904  0000E6  CFD9 F00D          	movff	fsr2l,??_ISR+6
   905  0000EA  CFDA F00E          	movff	fsr2h,??_ISR+7
   906  0000EE  CFF3 F00F          	movff	prodl,??_ISR+8
   907  0000F2  CFF4 F010          	movff	prodh,??_ISR+9
   908  0000F6  CFF6 F011          	movff	tblptrl,??_ISR+10
   909  0000FA  CFF7 F012          	movff	tblptrh,??_ISR+11
   910  0000FE  CFF8 F013          	movff	tblptru,??_ISR+12
   911  000102  CFF5 F014          	movff	tablat,??_ISR+13
   912                           
   913                           ;main.c: 224: if(PIR1bits.RCIF)
   914  000106  AA9E               	btfss	3998,5,c	;volatile
   915  000108  D017               	goto	i2l101
   916                           
   917                           ;main.c: 225: {
   918                           ;main.c: 226: RxBuffer[iRx%10] = UART_Read() ;
   919  00010A  C034  F001         	movff	_iRx,i2___awmod@dividend
   920  00010E  C035  F002         	movff	_iRx+1,i2___awmod@dividend+1
   921  000112  0E00               	movlw	0
   922  000114  6E04               	movwf	i2___awmod@divisor+1,c
   923  000116  0E0A               	movlw	10
   924  000118  6E03               	movwf	i2___awmod@divisor,c
   925  00011A  ECFA  F000         	call	i2___awmod	;wreg free
   926  00011E  0E20               	movlw	low _RxBuffer
   927  000120  2401               	addwf	?i2___awmod,w,c
   928  000122  6ED9               	movwf	fsr2l,c
   929  000124  0E00               	movlw	high _RxBuffer
   930  000126  2002               	addwfc	?i2___awmod+1,w,c
   931  000128  6EDA               	movwf	fsr2h,c
   932  00012A  ECA0  F001         	call	_UART_Read	;wreg free
   933  00012E  6EDF               	movwf	indf2,c
   934                           
   935                           ;main.c: 227: iRx++ ;
   936  000130  4A34               	infsnz	_iRx,f,c
   937  000132  2A35               	incf	_iRx+1,f,c
   938                           
   939                           ;main.c: 228: PIR1bits.RCIF = 0;
   940  000134  9A9E               	bcf	3998,5,c	;volatile
   941  000136  D000               	goto	i2l101
   942  000138                     i2l101:
   943  000138  C014  FFF5         	movff	??_ISR+13,tablat
   944  00013C  C013  FFF8         	movff	??_ISR+12,tblptru
   945  000140  C012  FFF7         	movff	??_ISR+11,tblptrh
   946  000144  C011  FFF6         	movff	??_ISR+10,tblptrl
   947  000148  C010  FFF4         	movff	??_ISR+9,prodh
   948  00014C  C00F  FFF3         	movff	??_ISR+8,prodl
   949  000150  C00E  FFDA         	movff	??_ISR+7,fsr2h
   950  000154  C00D  FFD9         	movff	??_ISR+6,fsr2l
   951  000158  C00C  FFE2         	movff	??_ISR+5,fsr1h
   952  00015C  C00B  FFE1         	movff	??_ISR+4,fsr1l
   953  000160  C00A  FFEA         	movff	??_ISR+3,fsr0h
   954  000164  C009  FFE9         	movff	??_ISR+2,fsr0l
   955  000168  C008  FFFB         	movff	??_ISR+1,pclatu
   956  00016C  C007  FFFA         	movff	??_ISR,pclath
   957  000170  0011               	retfie		f
   958  000172                     __end_of_ISR:
   959                           	opt stack 0
   960                           pclatu	equ	0xFFB
   961                           pclath	equ	0xFFA
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           prodh	equ	0xFF4
   967                           prodl	equ	0xFF3
   968                           intcon	equ	0xFF2
   969                           postinc0	equ	0xFEE
   970                           fsr0h	equ	0xFEA
   971                           fsr0l	equ	0xFE9
   972                           wreg	equ	0xFE8
   973                           fsr1h	equ	0xFE2
   974                           fsr1l	equ	0xFE1
   975                           indf2	equ	0xFDF
   976                           fsr2h	equ	0xFDA
   977                           fsr2l	equ	0xFD9
   978                           status	equ	0xFD8
   979                           
   980 ;; *************** function i2___awmod *****************
   981 ;; Defined at:
   982 ;;		line 8 in file "/Applications/microchip/xc8/v1.34/sources/common/awmod.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  dividend        2    0[COMRAM] int 
   985 ;;  divisor         2    2[COMRAM] int 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;  __awmod         1    5[COMRAM] unsigned char 
   988 ;;  __awmod         1    4[COMRAM] unsigned char 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  2    0[COMRAM] int 
   991 ;; Registers used:
   992 ;;		wreg, status,2, status,0
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   998 ;;      Params:         4       0       0       0       0       0       0
   999 ;;      Locals:         2       0       0       0       0       0       0
  1000 ;;      Temps:          0       0       0       0       0       0       0
  1001 ;;      Totals:         6       0       0       0       0       0       0
  1002 ;;Total ram usage:        6 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; This function calls:
  1005 ;;		Nothing
  1006 ;; This function is called by:
  1007 ;;		_ISR
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           	psect	text8
  1012  0001F4                     __ptext8:
  1013                           	opt stack 0
  1014  0001F4                     i2___awmod:
  1015                           	opt stack 26
  1016                           
  1017                           ;incstack = 0
  1018  0001F4  0E00               	movlw	0
  1019  0001F6  6E06               	movwf	i2___awmod@sign,c
  1020  0001F8  AE02               	btfss	i2___awmod@dividend+1,7,c
  1021  0001FA  D007               	goto	i2l925
  1022  0001FC  6C01               	negf	i2___awmod@dividend,c
  1023  0001FE  1E02               	comf	i2___awmod@dividend+1,f,c
  1024  000200  B0D8               	btfsc	status,0,c
  1025  000202  2A02               	incf	i2___awmod@dividend+1,f,c
  1026  000204  0E01               	movlw	1
  1027  000206  6E06               	movwf	i2___awmod@sign,c
  1028  000208  D000               	goto	i2l925
  1029  00020A                     i2l925:
  1030  00020A  AE04               	btfss	i2___awmod@divisor+1,7,c
  1031  00020C  D005               	goto	i2l929
  1032  00020E  6C03               	negf	i2___awmod@divisor,c
  1033  000210  1E04               	comf	i2___awmod@divisor+1,f,c
  1034  000212  B0D8               	btfsc	status,0,c
  1035  000214  2A04               	incf	i2___awmod@divisor+1,f,c
  1036  000216  D000               	goto	i2l929
  1037  000218                     i2l929:
  1038  000218  5003               	movf	i2___awmod@divisor,w,c
  1039  00021A  1004               	iorwf	i2___awmod@divisor+1,w,c
  1040  00021C  B4D8               	btfsc	status,2,c
  1041  00021E  D01D               	goto	i2l945
  1042  000220  0E01               	movlw	1
  1043  000222  6E05               	movwf	i2___awmod@counter,c
  1044  000224  D005               	goto	i2l935
  1045  000226                     i2l933:
  1046  000226  90D8               	bcf	status,0,c
  1047  000228  3603               	rlcf	i2___awmod@divisor,f,c
  1048  00022A  3604               	rlcf	i2___awmod@divisor+1,f,c
  1049  00022C  2A05               	incf	i2___awmod@counter,f,c
  1050  00022E  D000               	goto	i2l935
  1051  000230                     i2l935:
  1052  000230  BE04               	btfsc	i2___awmod@divisor+1,7,c
  1053  000232  D002               	goto	i2l937
  1054  000234  D7F8               	goto	i2l933
  1055  000236  D000               	goto	i2l937
  1056  000238                     i2l937:
  1057  000238  5003               	movf	i2___awmod@divisor,w,c
  1058  00023A  5C01               	subwf	i2___awmod@dividend,w,c
  1059  00023C  5004               	movf	i2___awmod@divisor+1,w,c
  1060  00023E  5802               	subwfb	i2___awmod@dividend+1,w,c
  1061  000240  A0D8               	btfss	status,0,c
  1062  000242  D005               	goto	i2l941
  1063  000244  5003               	movf	i2___awmod@divisor,w,c
  1064  000246  5E01               	subwf	i2___awmod@dividend,f,c
  1065  000248  5004               	movf	i2___awmod@divisor+1,w,c
  1066  00024A  5A02               	subwfb	i2___awmod@dividend+1,f,c
  1067  00024C  D000               	goto	i2l941
  1068  00024E                     i2l941:
  1069  00024E  90D8               	bcf	status,0,c
  1070  000250  3204               	rrcf	i2___awmod@divisor+1,f,c
  1071  000252  3203               	rrcf	i2___awmod@divisor,f,c
  1072  000254  2E05               	decfsz	i2___awmod@counter,f,c
  1073  000256  D7F0               	goto	i2l937
  1074  000258  D000               	goto	i2l945
  1075  00025A                     i2l945:
  1076  00025A  5006               	movf	i2___awmod@sign,w,c
  1077  00025C  B4D8               	btfsc	status,2,c
  1078  00025E  D005               	goto	i2l949
  1079  000260  6C01               	negf	i2___awmod@dividend,c
  1080  000262  1E02               	comf	i2___awmod@dividend+1,f,c
  1081  000264  B0D8               	btfsc	status,0,c
  1082  000266  2A02               	incf	i2___awmod@dividend+1,f,c
  1083  000268  D000               	goto	i2l949
  1084  00026A                     i2l949:
  1085  00026A  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  1086  00026E  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  1087  000272  D000               	goto	i2l310
  1088  000274                     i2l310:
  1089  000274  0012               	return		;funcret
  1090  000276                     __end_ofi2___awmod:
  1091                           	opt stack 0
  1092                           pclatu	equ	0xFFB
  1093                           pclath	equ	0xFFA
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           prodh	equ	0xFF4
  1099                           prodl	equ	0xFF3
  1100                           intcon	equ	0xFF2
  1101                           postinc0	equ	0xFEE
  1102                           fsr0h	equ	0xFEA
  1103                           fsr0l	equ	0xFE9
  1104                           wreg	equ	0xFE8
  1105                           fsr1h	equ	0xFE2
  1106                           fsr1l	equ	0xFE1
  1107                           indf2	equ	0xFDF
  1108                           fsr2h	equ	0xFDA
  1109                           fsr2l	equ	0xFD9
  1110                           status	equ	0xFD8
  1111                           
  1112 ;; *************** function _UART_Read *****************
  1113 ;; Defined at:
  1114 ;;		line 151 in file "main.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      unsigned char 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1128 ;;      Params:         0       0       0       0       0       0       0
  1129 ;;      Locals:         0       0       0       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0
  1131 ;;      Totals:         0       0       0       0       0       0       0
  1132 ;;Total ram usage:        0 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		_ISR
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           	psect	text9
  1142  000340                     __ptext9:
  1143                           	opt stack 0
  1144  000340                     _UART_Read:
  1145                           	opt stack 26
  1146                           
  1147                           ;main.c: 153: while(!RCIF);
  1148                           
  1149                           ;incstack = 0
  1150  000340  D000               	goto	i2l65
  1151  000342                     i2l65:
  1152  000342  AA9E               	btfss	3998,5,c	;volatile
  1153  000344  D7FE               	goto	i2l65
  1154                           
  1155                           ;main.c: 154: return RCREG;
  1156  000346  50AE               	movf	4014,w,c	;volatile
  1157  000348  D000               	goto	i2l68
  1158  00034A                     i2l68:
  1159  00034A  0012               	return		;funcret
  1160  00034C                     __end_of_UART_Read:
  1161                           	opt stack 0
  1162  0000                     pclatu	equ	0xFFB
  1163                           pclath	equ	0xFFA
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           intcon	equ	0xFF2
  1171                           postinc0	equ	0xFEE
  1172                           fsr0h	equ	0xFEA
  1173                           fsr0l	equ	0xFE9
  1174                           wreg	equ	0xFE8
  1175                           fsr1h	equ	0xFE2
  1176                           fsr1l	equ	0xFE1
  1177                           indf2	equ	0xFDF
  1178                           fsr2h	equ	0xFDA
  1179                           fsr2l	equ	0xFD9
  1180                           status	equ	0xFD8
  1181                           pclatu	equ	0xFFB
  1182                           pclath	equ	0xFFA
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           prodh	equ	0xFF4
  1188                           prodl	equ	0xFF3
  1189                           intcon	equ	0xFF2
  1190                           postinc0	equ	0xFEE
  1191                           fsr0h	equ	0xFEA
  1192                           fsr0l	equ	0xFE9
  1193                           wreg	equ	0xFE8
  1194                           fsr1h	equ	0xFE2
  1195                           fsr1l	equ	0xFE1
  1196                           indf2	equ	0xFDF
  1197                           fsr2h	equ	0xFDA
  1198                           fsr2l	equ	0xFD9
  1199                           status	equ	0xFD8
  1200                           
  1201                           	psect	rparam
  1202  0000                     pclatu	equ	0xFFB
  1203                           pclath	equ	0xFFA
  1204                           tblptru	equ	0xFF8
  1205                           tblptrh	equ	0xFF7
  1206                           tblptrl	equ	0xFF6
  1207                           tablat	equ	0xFF5
  1208                           prodh	equ	0xFF4
  1209                           prodl	equ	0xFF3
  1210                           intcon	equ	0xFF2
  1211                           postinc0	equ	0xFEE
  1212                           fsr0h	equ	0xFEA
  1213                           fsr0l	equ	0xFE9
  1214                           wreg	equ	0xFE8
  1215                           fsr1h	equ	0xFE2
  1216                           fsr1l	equ	0xFE1
  1217                           indf2	equ	0xFDF
  1218                           fsr2h	equ	0xFDA
  1219                           fsr2l	equ	0xFD9
  1220                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     31      61
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 2
		 -> valueBroche(COMRAM[2]), idBroche(COMRAM[2]), idModule(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->___awmod
    _parseMessage->___awmod
    _UART_Write_Text->_UART_Write

Critical Paths under _ISR in COMRAM

    _ISR->i2___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5    1827
                                             26 COMRAM     5     0      5
                            ___awmod
                         _init_IOPin
                         _init_USART
                       _parseMessage
 ---------------------------------------------------------------------------------
 (1) _parseMessage                                         0     0      0    1053
                         _UART_Write
                    _UART_Write_Text
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     774
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      4     2      2     264
                                             21 COMRAM     4     2      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      15
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_USART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_IOPin                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 14    14      0     348
                                              6 COMRAM    14    14      0
                          _UART_Read
                          i2___awmod
 ---------------------------------------------------------------------------------
 (5) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _init_IOPin
   _init_USART
   _parseMessage
     _UART_Write
     _UART_Write_Text
       _UART_Write
     ___awmod

 _ISR (ROOT)
   _UART_Read
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1F      3D       1       48.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      15        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May  5 15:48:14 2015

                      l71 0336               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
             __CFG_OSC$HS 000000                       l310 01F2                       l861 02D6  
                     l871 0188                       l857 02BE                       l881 01AE  
                     l883 01B6                       l891 01D8                       l875 0196  
                     l963 028C                       l895 01E8                       l887 01CC  
                     l879 01A4              __CFG_CPB$OFF 000000              __CFG_CPD$OFF 000000  
                     _ISR 0008                       _iRx 0034              ___awmod@sign 001A  
                     wreg 000FE8              __CFG_LVP$OFF 000000                      ?_ISR 0001  
            __CFG_WDT$OFF 000000                      _RCIF 007CF5                      i2l65 0342  
                    i2l68 034A                      _TRMT 007D61              __CFG_PWRT$ON 000000  
                    _main 0276                      fsr0h 000FEA                      fsr1h 000FE2  
                    fsr0l 000FE9                      fsr2h 000FDA                      fsr1l 000FE1  
                    indf2 000FDF                      fsr2l 000FD9                      pclat 000FFA  
                    prodh 000FF4                      prodl 000FF3                      start 0018  
           __CFG_IESO$OFF 000000             __CFG_MCLRE$ON 000000              ___param_bank 000010  
 __end_of_UART_Write_Text 02EA                     ??_ISR 0007                     ?_main 001B  
         __end_of___awmod 01F4                     i2l101 0138                     i2l310 0274  
                   i2l941 024E                     i2l933 0226                     i2l925 020A  
                   i2l935 0230                     i2l937 0238                     i2l945 025A  
                   i2l929 0218                     i2l949 026A                     _RCREG 000FAE  
                   _SPBRG 000FAF                     _TXREG 000FAD             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000               ?_UART_Write 0001  
      __size_of_UART_Read 000C             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000                     tablat 000FF5  
                   status 000FD8        __size_ofi2___awmod 0082           __initialization 0320  
            __end_of_main 02B4                    ??_main 0020             __activetblptr 000000  
          __CFG_XINST$OFF 000000         __end_of_UART_Read 034C       __size_of_UART_Write 000E  
          __CFG_STVREN$ON 000000                 ??___awmod 0019          ?_UART_Write_Text 0016  
                  clear_0 0326           ___awmod@divisor 0017           ___awmod@counter 0019  
       __end_ofi2___awmod 0276                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8            i2___awmod@sign 0006                __accesstop 0080  
 __end_of__initialization 032C           __CFG_PBADEN$OFF 000000             ?_parseMessage 0001  
           ___rparam_used 000001            __pcstackCOMRAM 0001                _iRxLecture 0036  
         __CFG_LPT1OSC$ON 000000            ??_parseMessage 001B        __CFG_CCP2MX$PORTBE 000000  
            ??_UART_Write 0015                   __Hparam 0000                   __Lparam 0000  
              _init_IOPin 02EA                _init_USART 030C                   ___awmod 0172  
      __end_of_UART_Write 0340                   __pcinit 0320                   __ramtop 0600  
                 __ptext0 0276                   __ptext1 001C                   __ptext2 0172  
                 __ptext3 02B4                   __ptext4 0332                   __ptext5 030C  
                 __ptext6 02EA                   __ptext8 01F4                   __ptext9 0340  
            __size_of_ISR 016A          ___awmod@dividend 0015            __pintcode_body 00D8  
    end_of_initialization 032C                   int_func 00D8                 _RCSTAbits 000FAB  
                 postinc0 000FEE                 _UART_Read 0340                 _PORTAbits 000F80  
          UART_Write@data 0015      __end_of_parseMessage 00D8                 _TRISAbits 000F92  
               _TRISBbits 000F93                 _TRISCbits 000F94                 i2___awmod 01F4  
               _TXSTAbits 000FAC               ?_init_IOPin 0001               ?_init_USART 0001  
              ?_UART_Read 0001  __size_of_UART_Write_Text 0036       start_initialization 0320  
             __end_of_ISR 0172                ?i2___awmod 0001               __pbssCOMRAM 0020  
     __size_of_init_IOPin 0022       __size_of_init_USART 0014                 __pintcode 0008  
                ?___awmod 0015     __size_of_parseMessage 00BC               ??_UART_Read 0001  
             ??i2___awmod 0005         ??_UART_Write_Text 0018              _parseMessage 001C  
                _PIE1bits 000F9D                  _PIR1bits 000F9E          __CFG_WDTPS$32768 000000  
              _ADCON1bits 000FC1        i2___awmod@dividend 0001                  _RxBuffer 0020  
                __Hrparam 0000              ??_init_IOPin 0015              ??_init_USART 0015  
                _TxBuffer 002A                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
        __size_of___awmod 0082                  _idBroche 0038                  _idModule 003A  
      __end_of_init_IOPin 030C        __end_of_init_USART 0320       UART_Write_Text@text 0016  
           __size_of_main 003E                  main@argc 001B                  main@argv 001D  
       i2___awmod@divisor 0003         i2___awmod@counter 0005               _OSCTUNEbits 000F9B  
              _INTCONbits 000FF2                  intlevel2 0000                _OSCCONbits 000FD3  
             _valueBroche 003C           _UART_Write_Text 02B4                _UART_Write 0332  
        UART_Write_Text@i 0018  
