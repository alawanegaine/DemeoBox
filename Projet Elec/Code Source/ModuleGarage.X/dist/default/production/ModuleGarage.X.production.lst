

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May  8 18:38:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    23  0000                     _ADCON1bits	set	4033
    24  0000                     _INTCONbits	set	4082
    25  0000                     _OSCCONbits	set	4051
    26  0000                     _OSCTUNEbits	set	3995
    27  0000                     _PIE1bits	set	3997
    28  0000                     _PIR1bits	set	3998
    29  0000                     _PORTAbits	set	3968
    30  0000                     _PORTBbits	set	3969
    31  0000                     _PORTCbits	set	3970
    32  0000                     _RCREG	set	4014
    33  0000                     _RCSTAbits	set	4011
    34  0000                     _SPBRG	set	4015
    35  0000                     _TRISAbits	set	3986
    36  0000                     _TRISBbits	set	3987
    37  0000                     _TRISCbits	set	3988
    38  0000                     _TXREG	set	4013
    39  0000                     _TXSTAbits	set	4012
    40  0000                     _RCIF	set	31989
    41  0000                     _TRMT	set	32097
    42                           
    43                           	psect	smallconst
    44  000600                     __psmallconst:
    45                           	opt stack 0
    46  000600  00                 	db	0
    47  000601                     STR_1:
    48  000601  49                 	db	73	;'I'
    49  000602  6E                 	db	110	;'n'
    50  000603  69                 	db	105	;'i'
    51  000604  74                 	db	116	;'t'
    52  000605  20                 	db	32
    53  000606  63                 	db	99	;'c'
    54  000607  6F                 	db	111	;'o'
    55  000608  6D                 	db	109	;'m'
    56  000609  70                 	db	112	;'p'
    57  00060A  6C                 	db	108	;'l'
    58  00060B  65                 	db	101	;'e'
    59  00060C  74                 	db	116	;'t'
    60  00060D  65                 	db	101	;'e'
    61  00060E  20                 	db	32
    62  00060F  21                 	db	33
    63  000610  21                 	db	33
    64  000611  0A                 	db	10
    65  000612  00                 	db	0
    66  000613                     STR_2:
    67  000613  42                 	db	66	;'B'
    68  000614  52                 	db	82	;'R'
    69  000615  4F                 	db	79	;'O'
    70  000616  43                 	db	67	;'C'
    71  000617  48                 	db	72	;'H'
    72  000618  45                 	db	69	;'E'
    73  000619  20                 	db	32
    74  00061A  32                 	db	50	;'2'
    75  00061B  0A                 	db	10
    76  00061C  00                 	db	0
    77  00061D                     STR_3:
    78  00061D  42                 	db	66	;'B'
    79  00061E  52                 	db	82	;'R'
    80  00061F  4F                 	db	79	;'O'
    81  000620  43                 	db	67	;'C'
    82  000621  48                 	db	72	;'H'
    83  000622  45                 	db	69	;'E'
    84  000623  20                 	db	32
    85  000624  33                 	db	51	;'3'
    86  000625  0A                 	db	10
    87  000626  00                 	db	0
    88  000627                     STR_4:
    89  000627  42                 	db	66	;'B'
    90  000628  52                 	db	82	;'R'
    91  000629  4F                 	db	79	;'O'
    92  00062A  43                 	db	67	;'C'
    93  00062B  48                 	db	72	;'H'
    94  00062C  45                 	db	69	;'E'
    95  00062D  20                 	db	32
    96  00062E  34                 	db	52	;'4'
    97  00062F  0A                 	db	10
    98  000630  00                 	db	0
    99  000631                     STR_5:
   100  000631  42                 	db	66	;'B'
   101  000632  52                 	db	82	;'R'
   102  000633  4F                 	db	79	;'O'
   103  000634  43                 	db	67	;'C'
   104  000635  48                 	db	72	;'H'
   105  000636  45                 	db	69	;'E'
   106  000637  20                 	db	32
   107  000638  35                 	db	53	;'5'
   108  000639  0A                 	db	10
   109  00063A  00                 	db	0
   110  00063B                     STR_6:
   111  00063B  42                 	db	66	;'B'
   112  00063C  52                 	db	82	;'R'
   113  00063D  4F                 	db	79	;'O'
   114  00063E  43                 	db	67	;'C'
   115  00063F  48                 	db	72	;'H'
   116  000640  45                 	db	69	;'E'
   117  000641  20                 	db	32
   118  000642  36                 	db	54	;'6'
   119  000643  0A                 	db	10
   120  000644  00                 	db	0
   121  000645                     STR_7:
   122  000645  42                 	db	66	;'B'
   123  000646  52                 	db	82	;'R'
   124  000647  4F                 	db	79	;'O'
   125  000648  43                 	db	67	;'C'
   126  000649  48                 	db	72	;'H'
   127  00064A  45                 	db	69	;'E'
   128  00064B  20                 	db	32
   129  00064C  37                 	db	55	;'7'
   130  00064D  0A                 	db	10
   131  00064E  00                 	db	0
   132  00064F                     STR_8:
   133  00064F  42                 	db	66	;'B'
   134  000650  52                 	db	82	;'R'
   135  000651  4F                 	db	79	;'O'
   136  000652  43                 	db	67	;'C'
   137  000653  48                 	db	72	;'H'
   138  000654  45                 	db	69	;'E'
   139  000655  20                 	db	32
   140  000656  38                 	db	56	;'8'
   141  000657  0A                 	db	10
   142  000658  00                 	db	0
   143                           
   144                           ; #config settings
   145  000659  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	cinit
   148  000B24                     __pcinit:
   149                           	opt stack 0
   150  000B24                     start_initialization:
   151                           	opt stack 0
   152  000B24                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Clear objects allocated to COMRAM (27 bytes)
   156  000B24  EE00  F023         	lfsr	0,__pbssCOMRAM
   157  000B28  0E1B               	movlw	27
   158  000B2A                     clear_0:
   159  000B2A  6AEE               	clrf	postinc0,c
   160  000B2C  06E8               	decf	wreg,f,c
   161  000B2E  E1FD               	bnz	clear_0
   162  000B30                     end_of_initialization:
   163                           	opt stack 0
   164  000B30                     __end_of__initialization:
   165                           	opt stack 0
   166  000B30  0E00               	movlw	low (__Lsmallconst shr (0+16))
   167  000B32  6EF8               	movwf	tblptru,c
   168  000B34  0E06               	movlw	high __Lsmallconst
   169  000B36  6EF7               	movwf	tblptrh,c
   170  000B38  0100               	movlb	0
   171  000B3A  EF2D  F003         	goto	_main	;jump to C main() function
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	bssCOMRAM
   178  000023                     __pbssCOMRAM:
   179                           	opt stack 0
   180  000023                     _RxBuffer:
   181                           	opt stack 0
   182  000023                     	ds	10
   183  00002D                     _TxBuffer:
   184                           	opt stack 0
   185  00002D                     	ds	10
   186  000037                     _iRx:
   187                           	opt stack 0
   188  000037                     	ds	2
   189  000039                     _iRxLecture:
   190                           	opt stack 0
   191  000039                     	ds	2
   192  00003B                     _idBrocheRead:
   193                           	opt stack 0
   194  00003B                     	ds	1
   195  00003C                     _idModuleRead:
   196                           	opt stack 0
   197  00003C                     	ds	1
   198  00003D                     _valueBrocheRead:
   199                           	opt stack 0
   200  00003D                     	ds	1
   201                           tblptru	equ	0xFF8
   202                           tblptrh	equ	0xFF7
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000001                     ?i2___awmod:
   210                           	opt stack 0
   211  000001                     i2___awmod@dividend:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x0
   215  000001                     	ds	2
   216  000003                     i2___awmod@divisor:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x2
   220  000003                     	ds	2
   221  000005                     i2___awmod@counter:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x4
   225  000005                     	ds	1
   226  000006                     i2___awmod@sign:
   227                           	opt stack 0
   228                           
   229                           ; 1 bytes @ 0x5
   230  000006                     	ds	1
   231  000007                     ??_ISR:
   232                           
   233                           ; 0 bytes @ 0x6
   234  000007                     	ds	14
   235  000015                     ?_read_id_module:
   236                           	opt stack 0
   237  000015                     ?___awmod:
   238                           	opt stack 0
   239  000015                     UART_Write@data:
   240                           	opt stack 0
   241  000015                     ___awmod@dividend:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x14
   245  000015                     	ds	1
   246  000016                     UART_Write_Text@text:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x15
   250  000016                     	ds	1
   251  000017                     read_id_module@id:
   252                           	opt stack 0
   253  000017                     ___awmod@divisor:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x16
   257  000017                     	ds	1
   258  000018                     ??_UART_Write_Text:
   259                           
   260                           ; 0 bytes @ 0x17
   261  000018                     	ds	1
   262  000019                     ___awmod@counter:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x18
   266  000019                     	ds	1
   267  00001A                     ___awmod@sign:
   268                           	opt stack 0
   269  00001A                     UART_Write_Text@i:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x19
   273  00001A                     	ds	1
   274  00001B                     
   275                           ; 0 bytes @ 0x1A
   276  00001B                     	ds	1
   277  00001C                     
   278                           ; 2 bytes @ 0x1B
   279  00001C                     	ds	2
   280  00001E                     
   281                           ; 3 bytes @ 0x1D
   282  00001E                     	ds	3
   283  000021                     ??_main:
   284                           
   285                           ; 0 bytes @ 0x20
   286  000021                     	ds	2
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292 ;;
   293 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   294 ;;
   295 ;; *************** function _main *****************
   296 ;; Defined at:
   297 ;;		line 215 in file "main.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;  argc            2   27[COMRAM] int 
   300 ;;  argv            3   29[COMRAM] PTR PTR unsigned char 
   301 ;; Auto vars:     Size  Location     Type
   302 ;;		None
   303 ;; Return value:  Size  Location     Type
   304 ;;                  2   27[COMRAM] int 
   305 ;; Registers used:
   306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   307 ;; Tracked objects:
   308 ;;		On entry : 0/0
   309 ;;		On exit  : 0/0
   310 ;;		Unchanged: 0/0
   311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   312 ;;      Params:         5       0       0       0       0       0       0
   313 ;;      Locals:         0       0       0       0       0       0       0
   314 ;;      Temps:          2       0       0       0       0       0       0
   315 ;;      Totals:         7       0       0       0       0       0       0
   316 ;;Total ram usage:        7 bytes
   317 ;; Hardware stack levels required when called:    4
   318 ;; This function calls:
   319 ;;		_UART_Write_Text
   320 ;;		___awmod
   321 ;;		_init_IOPin
   322 ;;		_init_USART
   323 ;;		_parseMessage
   324 ;;		_read_id_module
   325 ;; This function is called by:
   326 ;;		Startup code after reset
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330                           	psect	text0
   331  00065A                     __ptext0:
   332                           	opt stack 0
   333  00065A                     _main:
   334                           	opt stack 27
   335                           
   336                           ;main.c: 217: OSCCONbits.IRCF = 0b111 ;
   337                           
   338                           ;incstack = 0
   339  00065A  88D3               	bsf	4051,4,c	;volatile
   340  00065C  8AD3               	bsf	4051,5,c	;volatile
   341  00065E  8CD3               	bsf	4051,6,c	;volatile
   342                           
   343                           ;main.c: 218: OSCTUNEbits.PLLEN = 1 ;
   344  000660  8C9B               	bsf	3995,6,c	;volatile
   345                           
   346                           ;main.c: 219: init_USART();
   347  000662  EC9F  F005         	call	_init_USART	;wreg free
   348                           
   349                           ;main.c: 220: init_IOPin();
   350  000666  EC79  F005         	call	_init_IOPin	;wreg free
   351                           
   352                           ;main.c: 222: INTCONbits.PEIE = 1 ;
   353  00066A  8CF2               	bsf	intcon,6,c	;volatile
   354                           
   355                           ;main.c: 223: INTCONbits.GIE = 1 ;
   356  00066C  8EF2               	bsf	intcon,7,c	;volatile
   357                           
   358                           ;main.c: 225: UART_Write_Text("Init complete !!\n");
   359  00066E  0E01               	movlw	low STR_1
   360  000670  6E16               	movwf	UART_Write_Text@text,c
   361  000672  0E06               	movlw	high STR_1
   362  000674  6E17               	movwf	UART_Write_Text@text+1,c
   363  000676  EC2F  F005         	call	_UART_Write_Text	;wreg free
   364  00067A  D000               	goto	l1095
   365  00067C                     l1095:
   366                           
   367                           ;main.c: 228: {
   368                           ;main.c: 229: if(iRx%10 == 5){
   369  00067C  C037  F015         	movff	_iRx,___awmod@dividend
   370  000680  C038  F016         	movff	_iRx+1,___awmod@dividend+1
   371  000684  0E00               	movlw	0
   372  000686  6E18               	movwf	___awmod@divisor+1,c
   373  000688  0E0A               	movlw	10
   374  00068A  6E17               	movwf	___awmod@divisor,c
   375  00068C  ECAD  F004         	call	___awmod	;wreg free
   376  000690  0E05               	movlw	5
   377  000692  1815               	xorwf	?___awmod,w,c
   378  000694  1016               	iorwf	?___awmod+1,w,c
   379  000696  A4D8               	btfss	status,2,c
   380  000698  D7F1               	goto	l1095
   381                           
   382                           ;main.c: 230: parseMessage();
   383  00069A  ECEB  F003         	call	_parseMessage	;wreg free
   384                           
   385                           ;main.c: 231: if(idModuleRead == (read_id_module()+48)){
   386  00069E  503C               	movf	_idModuleRead,w,c
   387  0006A0  6E21               	movwf	??_main& (0+255),c
   388  0006A2  6A22               	clrf	(??_main+1)& (0+255),c
   389  0006A4  EC55  F005         	call	_read_id_module	;wreg free
   390  0006A8  0E30               	movlw	48
   391  0006AA  2615               	addwf	?_read_id_module,f,c
   392  0006AC  0E00               	movlw	0
   393  0006AE  2216               	addwfc	?_read_id_module+1,f,c
   394  0006B0  5021               	movf	??_main,w,c
   395  0006B2  1815               	xorwf	?_read_id_module,w,c
   396  0006B4  E1E3               	bnz	l1095
   397  0006B6  5022               	movf	??_main+1,w,c
   398  0006B8  1816               	xorwf	?_read_id_module+1,w,c
   399  0006BA  A4D8               	btfss	status,2,c
   400  0006BC  D7DF               	goto	l1095
   401                           
   402                           ;main.c: 232: if(idBrocheRead=='1'){
   403  0006BE  0E31               	movlw	49
   404  0006C0  183B               	xorwf	_idBrocheRead,w,c
   405  0006C2  A4D8               	btfss	status,2,c
   406  0006C4  D008               	goto	l1107
   407                           
   408                           ;main.c: 233: if(valueBrocheRead == '1')
   409  0006C6  0E31               	movlw	49
   410  0006C8  183D               	xorwf	_valueBrocheRead,w,c
   411  0006CA  A4D8               	btfss	status,2,c
   412  0006CC  D002               	goto	l104
   413                           
   414                           ;main.c: 234: PORTBbits.RB1 = 0 ;
   415  0006CE  9281               	bcf	3969,1,c	;volatile
   416  0006D0  D002               	goto	l1107
   417  0006D2                     l104:
   418                           
   419                           ;main.c: 235: else
   420                           ;main.c: 236: PORTBbits.RB1 = 1 ;
   421  0006D2  8281               	bsf	3969,1,c	;volatile
   422  0006D4  D000               	goto	l1107
   423  0006D6                     l1107:
   424                           
   425                           ;main.c: 237: }
   426                           ;main.c: 238: if(idBrocheRead=='2'){
   427  0006D6  0E32               	movlw	50
   428  0006D8  183B               	xorwf	_idBrocheRead,w,c
   429  0006DA  A4D8               	btfss	status,2,c
   430  0006DC  D00E               	goto	l1115
   431                           
   432                           ;main.c: 239: UART_Write_Text("BROCHE 2\n");
   433  0006DE  0E13               	movlw	low STR_2
   434  0006E0  6E16               	movwf	UART_Write_Text@text,c
   435  0006E2  0E06               	movlw	high STR_2
   436  0006E4  6E17               	movwf	UART_Write_Text@text+1,c
   437  0006E6  EC2F  F005         	call	_UART_Write_Text	;wreg free
   438                           
   439                           ;main.c: 240: if(valueBrocheRead == '1')
   440  0006EA  0E31               	movlw	49
   441  0006EC  183D               	xorwf	_valueBrocheRead,w,c
   442  0006EE  A4D8               	btfss	status,2,c
   443  0006F0  D002               	goto	l107
   444                           
   445                           ;main.c: 241: PORTBbits.RB0 = 0 ;
   446  0006F2  9081               	bcf	3969,0,c	;volatile
   447  0006F4  D002               	goto	l1115
   448  0006F6                     l107:
   449                           
   450                           ;main.c: 242: else
   451                           ;main.c: 243: PORTBbits.RB0 = 1 ;
   452  0006F6  8081               	bsf	3969,0,c	;volatile
   453  0006F8  D000               	goto	l1115
   454  0006FA                     l1115:
   455                           
   456                           ;main.c: 244: }
   457                           ;main.c: 245: if(idBrocheRead=='3'){
   458  0006FA  0E33               	movlw	51
   459  0006FC  183B               	xorwf	_idBrocheRead,w,c
   460  0006FE  A4D8               	btfss	status,2,c
   461  000700  D00E               	goto	l1123
   462                           
   463                           ;main.c: 246: UART_Write_Text("BROCHE 3\n");
   464  000702  0E1D               	movlw	low STR_3
   465  000704  6E16               	movwf	UART_Write_Text@text,c
   466  000706  0E06               	movlw	high STR_3
   467  000708  6E17               	movwf	UART_Write_Text@text+1,c
   468  00070A  EC2F  F005         	call	_UART_Write_Text	;wreg free
   469                           
   470                           ;main.c: 247: if(valueBrocheRead == '1')
   471  00070E  0E31               	movlw	49
   472  000710  183D               	xorwf	_valueBrocheRead,w,c
   473  000712  A4D8               	btfss	status,2,c
   474  000714  D002               	goto	l110
   475                           
   476                           ;main.c: 248: PORTCbits.RC5 = 0 ;
   477  000716  9A82               	bcf	3970,5,c	;volatile
   478  000718  D002               	goto	l1123
   479  00071A                     l110:
   480                           
   481                           ;main.c: 249: else
   482                           ;main.c: 250: PORTCbits.RC5 = 1 ;
   483  00071A  8A82               	bsf	3970,5,c	;volatile
   484  00071C  D000               	goto	l1123
   485  00071E                     l1123:
   486                           
   487                           ;main.c: 251: }
   488                           ;main.c: 252: if(idBrocheRead=='4'){
   489  00071E  0E34               	movlw	52
   490  000720  183B               	xorwf	_idBrocheRead,w,c
   491  000722  A4D8               	btfss	status,2,c
   492  000724  D00E               	goto	l1131
   493                           
   494                           ;main.c: 253: UART_Write_Text("BROCHE 4\n");
   495  000726  0E27               	movlw	low STR_4
   496  000728  6E16               	movwf	UART_Write_Text@text,c
   497  00072A  0E06               	movlw	high STR_4
   498  00072C  6E17               	movwf	UART_Write_Text@text+1,c
   499  00072E  EC2F  F005         	call	_UART_Write_Text	;wreg free
   500                           
   501                           ;main.c: 254: if(valueBrocheRead == '1')
   502  000732  0E31               	movlw	49
   503  000734  183D               	xorwf	_valueBrocheRead,w,c
   504  000736  A4D8               	btfss	status,2,c
   505  000738  D002               	goto	l113
   506                           
   507                           ;main.c: 255: PORTCbits.RC4 = 0 ;
   508  00073A  9882               	bcf	3970,4,c	;volatile
   509  00073C  D002               	goto	l1131
   510  00073E                     l113:
   511                           
   512                           ;main.c: 256: else
   513                           ;main.c: 257: PORTCbits.RC4 = 1 ;
   514  00073E  8882               	bsf	3970,4,c	;volatile
   515  000740  D000               	goto	l1131
   516  000742                     l1131:
   517                           
   518                           ;main.c: 258: }
   519                           ;main.c: 259: if(idBrocheRead=='5'){
   520  000742  0E35               	movlw	53
   521  000744  183B               	xorwf	_idBrocheRead,w,c
   522  000746  A4D8               	btfss	status,2,c
   523  000748  D00E               	goto	l1139
   524                           
   525                           ;main.c: 260: UART_Write_Text("BROCHE 5\n");
   526  00074A  0E31               	movlw	low STR_5
   527  00074C  6E16               	movwf	UART_Write_Text@text,c
   528  00074E  0E06               	movlw	high STR_5
   529  000750  6E17               	movwf	UART_Write_Text@text+1,c
   530  000752  EC2F  F005         	call	_UART_Write_Text	;wreg free
   531                           
   532                           ;main.c: 261: if(valueBrocheRead == '1')
   533  000756  0E31               	movlw	49
   534  000758  183D               	xorwf	_valueBrocheRead,w,c
   535  00075A  A4D8               	btfss	status,2,c
   536  00075C  D002               	goto	l116
   537                           
   538                           ;main.c: 262: PORTCbits.RC3 = 0 ;
   539  00075E  9682               	bcf	3970,3,c	;volatile
   540  000760  D002               	goto	l1139
   541  000762                     l116:
   542                           
   543                           ;main.c: 263: else
   544                           ;main.c: 264: PORTCbits.RC3 = 1 ;
   545  000762  8682               	bsf	3970,3,c	;volatile
   546  000764  D000               	goto	l1139
   547  000766                     l1139:
   548                           
   549                           ;main.c: 265: }
   550                           ;main.c: 266: if(idBrocheRead=='6'){
   551  000766  0E36               	movlw	54
   552  000768  183B               	xorwf	_idBrocheRead,w,c
   553  00076A  A4D8               	btfss	status,2,c
   554  00076C  D00E               	goto	l1147
   555                           
   556                           ;main.c: 267: UART_Write_Text("BROCHE 6\n");
   557  00076E  0E3B               	movlw	low STR_6
   558  000770  6E16               	movwf	UART_Write_Text@text,c
   559  000772  0E06               	movlw	high STR_6
   560  000774  6E17               	movwf	UART_Write_Text@text+1,c
   561  000776  EC2F  F005         	call	_UART_Write_Text	;wreg free
   562                           
   563                           ;main.c: 268: if(valueBrocheRead == '1')
   564  00077A  0E31               	movlw	49
   565  00077C  183D               	xorwf	_valueBrocheRead,w,c
   566  00077E  A4D8               	btfss	status,2,c
   567  000780  D002               	goto	l119
   568                           
   569                           ;main.c: 269: PORTCbits.RC2 = 0 ;
   570  000782  9482               	bcf	3970,2,c	;volatile
   571  000784  D002               	goto	l1147
   572  000786                     l119:
   573                           
   574                           ;main.c: 270: else
   575                           ;main.c: 271: PORTCbits.RC2 = 1 ;
   576  000786  8482               	bsf	3970,2,c	;volatile
   577  000788  D000               	goto	l1147
   578  00078A                     l1147:
   579                           
   580                           ;main.c: 272: }
   581                           ;main.c: 273: if(idBrocheRead=='7'){
   582  00078A  0E37               	movlw	55
   583  00078C  183B               	xorwf	_idBrocheRead,w,c
   584  00078E  A4D8               	btfss	status,2,c
   585  000790  D00E               	goto	l1155
   586                           
   587                           ;main.c: 274: UART_Write_Text("BROCHE 7\n");
   588  000792  0E45               	movlw	low STR_7
   589  000794  6E16               	movwf	UART_Write_Text@text,c
   590  000796  0E06               	movlw	high STR_7
   591  000798  6E17               	movwf	UART_Write_Text@text+1,c
   592  00079A  EC2F  F005         	call	_UART_Write_Text	;wreg free
   593                           
   594                           ;main.c: 275: if(valueBrocheRead == '1')
   595  00079E  0E31               	movlw	49
   596  0007A0  183D               	xorwf	_valueBrocheRead,w,c
   597  0007A2  A4D8               	btfss	status,2,c
   598  0007A4  D002               	goto	l122
   599                           
   600                           ;main.c: 276: PORTCbits.RC1 = 0 ;
   601  0007A6  9282               	bcf	3970,1,c	;volatile
   602  0007A8  D002               	goto	l1155
   603  0007AA                     l122:
   604                           
   605                           ;main.c: 277: else
   606                           ;main.c: 278: PORTCbits.RC1 = 1 ;
   607  0007AA  8282               	bsf	3970,1,c	;volatile
   608  0007AC  D000               	goto	l1155
   609  0007AE                     l1155:
   610                           
   611                           ;main.c: 279: }
   612                           ;main.c: 280: if(idBrocheRead=='8'){
   613  0007AE  0E38               	movlw	56
   614  0007B0  183B               	xorwf	_idBrocheRead,w,c
   615  0007B2  A4D8               	btfss	status,2,c
   616  0007B4  D763               	goto	l1095
   617                           
   618                           ;main.c: 281: UART_Write_Text("BROCHE 8\n");
   619  0007B6  0E4F               	movlw	low STR_8
   620  0007B8  6E16               	movwf	UART_Write_Text@text,c
   621  0007BA  0E06               	movlw	high STR_8
   622  0007BC  6E17               	movwf	UART_Write_Text@text+1,c
   623  0007BE  EC2F  F005         	call	_UART_Write_Text	;wreg free
   624                           
   625                           ;main.c: 282: if(valueBrocheRead == '1')
   626  0007C2  0E31               	movlw	49
   627  0007C4  183D               	xorwf	_valueBrocheRead,w,c
   628  0007C6  A4D8               	btfss	status,2,c
   629  0007C8  D002               	goto	l125
   630                           
   631                           ;main.c: 283: PORTCbits.RC0 = 0 ;
   632  0007CA  9082               	bcf	3970,0,c	;volatile
   633  0007CC  D757               	goto	l1095
   634  0007CE                     l125:
   635                           
   636                           ;main.c: 284: else
   637                           ;main.c: 285: PORTCbits.RC0 = 1 ;
   638  0007CE  8082               	bsf	3970,0,c	;volatile
   639  0007D0  D755               	goto	l1095
   640                           
   641                           ;main.c: 286: }
   642                           ;main.c: 287: }
   643                           ;main.c: 288: }
   644                           ;main.c: 289: }
   645                           ;main.c: 291: return 0;
   646                           ;	Return value of _main is never used
   647  0007D2  EF0C  F000         	goto	start
   648  0007D6                     __end_of_main:
   649                           	opt stack 0
   650                           tblptru	equ	0xFF8
   651                           tblptrh	equ	0xFF7
   652                           intcon	equ	0xFF2
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           status	equ	0xFD8
   656                           
   657 ;; *************** function _read_id_module *****************
   658 ;; Defined at:
   659 ;;		line 179 in file "main.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;  id              2   22[COMRAM] int 
   664 ;; Return value:  Size  Location     Type
   665 ;;                  2   20[COMRAM] int 
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   673 ;;      Params:         2       0       0       0       0       0       0
   674 ;;      Locals:         2       0       0       0       0       0       0
   675 ;;      Temps:          0       0       0       0       0       0       0
   676 ;;      Totals:         4       0       0       0       0       0       0
   677 ;;Total ram usage:        4 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; Hardware stack levels required when called:    2
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		_main
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           	psect	text1
   688  000AAA                     __ptext1:
   689                           	opt stack 0
   690  000AAA                     _read_id_module:
   691                           	opt stack 28
   692                           
   693                           ;main.c: 180: int id = 0;
   694                           
   695                           ;incstack = 0
   696  000AAA  0E00               	movlw	0
   697  000AAC  6E18               	movwf	read_id_module@id+1,c
   698  000AAE  0E00               	movlw	0
   699  000AB0  6E17               	movwf	read_id_module@id,c
   700                           
   701                           ;main.c: 181: if(!PORTAbits.RA0){
   702  000AB2  B080               	btfsc	3968,0,c	;volatile
   703  000AB4  D003               	goto	l1009
   704                           
   705                           ;main.c: 182: id += 1 ;
   706  000AB6  4A17               	infsnz	read_id_module@id,f,c
   707  000AB8  2A18               	incf	read_id_module@id+1,f,c
   708  000ABA  D000               	goto	l1009
   709  000ABC                     l1009:
   710                           
   711                           ;main.c: 183: }
   712                           ;main.c: 184: if(!PORTAbits.RA2){
   713  000ABC  B480               	btfsc	3968,2,c	;volatile
   714  000ABE  D005               	goto	l1013
   715                           
   716                           ;main.c: 185: id += 2 ;
   717  000AC0  0E02               	movlw	2
   718  000AC2  2617               	addwf	read_id_module@id,f,c
   719  000AC4  0E00               	movlw	0
   720  000AC6  2218               	addwfc	read_id_module@id+1,f,c
   721  000AC8  D000               	goto	l1013
   722  000ACA                     l1013:
   723                           
   724                           ;main.c: 186: }
   725                           ;main.c: 187: if(!PORTAbits.RA1){
   726  000ACA  B280               	btfsc	3968,1,c	;volatile
   727  000ACC  D005               	goto	l1017
   728                           
   729                           ;main.c: 188: id += 4 ;
   730  000ACE  0E04               	movlw	4
   731  000AD0  2617               	addwf	read_id_module@id,f,c
   732  000AD2  0E00               	movlw	0
   733  000AD4  2218               	addwfc	read_id_module@id+1,f,c
   734  000AD6  D000               	goto	l1017
   735  000AD8                     l1017:
   736                           
   737                           ;main.c: 189: }
   738                           ;main.c: 190: if(!PORTAbits.RA3){
   739  000AD8  B680               	btfsc	3968,3,c	;volatile
   740  000ADA  D005               	goto	l1021
   741                           
   742                           ;main.c: 191: id += 8 ;
   743  000ADC  0E08               	movlw	8
   744  000ADE  2617               	addwf	read_id_module@id,f,c
   745  000AE0  0E00               	movlw	0
   746  000AE2  2218               	addwfc	read_id_module@id+1,f,c
   747  000AE4  D000               	goto	l1021
   748  000AE6                     l1021:
   749                           
   750                           ;main.c: 192: }
   751                           ;main.c: 193: return id ;
   752  000AE6  C017  F015         	movff	read_id_module@id,?_read_id_module
   753  000AEA  C018  F016         	movff	read_id_module@id+1,?_read_id_module+1
   754  000AEE  D000               	goto	l91
   755  000AF0                     l91:
   756  000AF0  0012               	return		;funcret
   757  000AF2                     __end_of_read_id_module:
   758                           	opt stack 0
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           intcon	equ	0xFF2
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           status	equ	0xFD8
   765                           
   766 ;; *************** function _parseMessage *****************
   767 ;; Defined at:
   768 ;;		line 196 in file "main.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;		None
   773 ;; Return value:  Size  Location     Type
   774 ;;		None               void
   775 ;; Registers used:
   776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   782 ;;      Params:         0       0       0       0       0       0       0
   783 ;;      Locals:         0       0       0       0       0       0       0
   784 ;;      Temps:          1       0       0       0       0       0       0
   785 ;;      Totals:         1       0       0       0       0       0       0
   786 ;;Total ram usage:        1 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; Hardware stack levels required when called:    3
   789 ;; This function calls:
   790 ;;		___awmod
   791 ;; This function is called by:
   792 ;;		_main
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text2
   797  0007D6                     __ptext2:
   798                           	opt stack 0
   799  0007D6                     _parseMessage:
   800                           	opt stack 27
   801                           
   802                           ;main.c: 197: if(RxBuffer[iRxLecture%10]<'0' || RxBuffer[iRxLecture%10]>'9')
   803                           
   804                           ;incstack = 0
   805  0007D6  C039  F015         	movff	_iRxLecture,___awmod@dividend
   806  0007DA  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   807  0007DE  0E00               	movlw	0
   808  0007E0  6E18               	movwf	___awmod@divisor+1,c
   809  0007E2  0E0A               	movlw	10
   810  0007E4  6E17               	movwf	___awmod@divisor,c
   811  0007E6  ECAD  F004         	call	___awmod	;wreg free
   812  0007EA  0E23               	movlw	low _RxBuffer
   813  0007EC  2415               	addwf	?___awmod,w,c
   814  0007EE  6ED9               	movwf	fsr2l,c
   815  0007F0  0E00               	movlw	high _RxBuffer
   816  0007F2  2016               	addwfc	?___awmod+1,w,c
   817  0007F4  6EDA               	movwf	fsr2h,c
   818  0007F6  0E2F               	movlw	47
   819  0007F8  64DF               	cpfsgt	indf2,c
   820  0007FA  D014               	goto	l1029
   821  0007FC  C039  F015         	movff	_iRxLecture,___awmod@dividend
   822  000800  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   823  000804  0E00               	movlw	0
   824  000806  6E18               	movwf	___awmod@divisor+1,c
   825  000808  0E0A               	movlw	10
   826  00080A  6E17               	movwf	___awmod@divisor,c
   827  00080C  ECAD  F004         	call	___awmod	;wreg free
   828  000810  0E23               	movlw	low _RxBuffer
   829  000812  2415               	addwf	?___awmod,w,c
   830  000814  6ED9               	movwf	fsr2l,c
   831  000816  0E00               	movlw	high _RxBuffer
   832  000818  2016               	addwfc	?___awmod+1,w,c
   833  00081A  6EDA               	movwf	fsr2h,c
   834  00081C  0E39               	movlw	57
   835  00081E  64DF               	cpfsgt	indf2,c
   836  000820  D004               	goto	l1031
   837  000822  D000               	goto	l1029
   838  000824                     l1029:
   839                           
   840                           ;main.c: 198: iRxLecture++ ;
   841  000824  4A39               	infsnz	_iRxLecture,f,c
   842  000826  2A3A               	incf	_iRxLecture+1,f,c
   843  000828  D000               	goto	l1031
   844  00082A                     l1031:
   845                           
   846                           ;main.c: 199: idModuleRead = RxBuffer[iRxLecture%10];
   847  00082A  C039  F015         	movff	_iRxLecture,___awmod@dividend
   848  00082E  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   849  000832  0E00               	movlw	0
   850  000834  6E18               	movwf	___awmod@divisor+1,c
   851  000836  0E0A               	movlw	10
   852  000838  6E17               	movwf	___awmod@divisor,c
   853  00083A  ECAD  F004         	call	___awmod	;wreg free
   854  00083E  0E23               	movlw	low _RxBuffer
   855  000840  2415               	addwf	?___awmod,w,c
   856  000842  6ED9               	movwf	fsr2l,c
   857  000844  0E00               	movlw	high _RxBuffer
   858  000846  2016               	addwfc	?___awmod+1,w,c
   859  000848  6EDA               	movwf	fsr2h,c
   860  00084A  50DF               	movf	indf2,w,c
   861  00084C  6E3C               	movwf	_idModuleRead,c
   862                           
   863                           ;main.c: 200: iRxLecture += 2 ;
   864  00084E  0E02               	movlw	2
   865  000850  2639               	addwf	_iRxLecture,f,c
   866  000852  0E00               	movlw	0
   867  000854  223A               	addwfc	_iRxLecture+1,f,c
   868                           
   869                           ;main.c: 201: idBrocheRead = RxBuffer[iRxLecture%10];
   870  000856  C039  F015         	movff	_iRxLecture,___awmod@dividend
   871  00085A  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   872  00085E  0E00               	movlw	0
   873  000860  6E18               	movwf	___awmod@divisor+1,c
   874  000862  0E0A               	movlw	10
   875  000864  6E17               	movwf	___awmod@divisor,c
   876  000866  ECAD  F004         	call	___awmod	;wreg free
   877  00086A  0E23               	movlw	low _RxBuffer
   878  00086C  2415               	addwf	?___awmod,w,c
   879  00086E  6ED9               	movwf	fsr2l,c
   880  000870  0E00               	movlw	high _RxBuffer
   881  000872  2016               	addwfc	?___awmod+1,w,c
   882  000874  6EDA               	movwf	fsr2h,c
   883  000876  50DF               	movf	indf2,w,c
   884  000878  6E3B               	movwf	_idBrocheRead,c
   885                           
   886                           ;main.c: 202: iRxLecture += 2 ;
   887  00087A  0E02               	movlw	2
   888  00087C  2639               	addwf	_iRxLecture,f,c
   889  00087E  0E00               	movlw	0
   890  000880  223A               	addwfc	_iRxLecture+1,f,c
   891                           
   892                           ;main.c: 203: valueBrocheRead = RxBuffer[iRxLecture%10];
   893  000882  C039  F015         	movff	_iRxLecture,___awmod@dividend
   894  000886  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   895  00088A  0E00               	movlw	0
   896  00088C  6E18               	movwf	___awmod@divisor+1,c
   897  00088E  0E0A               	movlw	10
   898  000890  6E17               	movwf	___awmod@divisor,c
   899  000892  ECAD  F004         	call	___awmod	;wreg free
   900  000896  0E23               	movlw	low _RxBuffer
   901  000898  2415               	addwf	?___awmod,w,c
   902  00089A  6ED9               	movwf	fsr2l,c
   903  00089C  0E00               	movlw	high _RxBuffer
   904  00089E  2016               	addwfc	?___awmod+1,w,c
   905  0008A0  6EDA               	movwf	fsr2h,c
   906  0008A2  50DF               	movf	indf2,w,c
   907  0008A4  6E3D               	movwf	_valueBrocheRead,c
   908                           
   909                           ;main.c: 204: iRxLecture += 2 ;
   910  0008A6  0E02               	movlw	2
   911  0008A8  2639               	addwf	_iRxLecture,f,c
   912  0008AA  0E00               	movlw	0
   913  0008AC  223A               	addwfc	_iRxLecture+1,f,c
   914                           
   915                           ;main.c: 205: iRx = 0 ;
   916  0008AE  0E00               	movlw	0
   917  0008B0  6E38               	movwf	_iRx+1,c
   918  0008B2  0E00               	movlw	0
   919  0008B4  6E37               	movwf	_iRx,c
   920                           
   921                           ;main.c: 206: iRxLecture = 0 ;
   922  0008B6  0E00               	movlw	0
   923  0008B8  6E3A               	movwf	_iRxLecture+1,c
   924  0008BA  0E00               	movlw	0
   925  0008BC  6E39               	movwf	_iRxLecture,c
   926  0008BE  0012               	return		;funcret
   927  0008C0                     __end_of_parseMessage:
   928                           	opt stack 0
   929                           tblptru	equ	0xFF8
   930                           tblptrh	equ	0xFF7
   931                           intcon	equ	0xFF2
   932                           postinc0	equ	0xFEE
   933                           wreg	equ	0xFE8
   934                           indf2	equ	0xFDF
   935                           fsr2h	equ	0xFDA
   936                           fsr2l	equ	0xFD9
   937                           status	equ	0xFD8
   938                           
   939 ;; *************** function ___awmod *****************
   940 ;; Defined at:
   941 ;;		line 8 in file "/Applications/microchip/xc8/v1.34/sources/common/awmod.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;  dividend        2   20[COMRAM] int 
   944 ;;  divisor         2   22[COMRAM] int 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  sign            1   25[COMRAM] unsigned char 
   947 ;;  counter         1   24[COMRAM] unsigned char 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  2   20[COMRAM] int 
   950 ;; Registers used:
   951 ;;		wreg, status,2, status,0
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   957 ;;      Params:         4       0       0       0       0       0       0
   958 ;;      Locals:         2       0       0       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0       0       0
   960 ;;      Totals:         6       0       0       0       0       0       0
   961 ;;Total ram usage:        6 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    2
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_parseMessage
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text3
   973  00095A                     __ptext3:
   974                           	opt stack 0
   975  00095A                     ___awmod:
   976                           	opt stack 27
   977                           
   978                           ;incstack = 0
   979  00095A  0E00               	movlw	0
   980  00095C  6E1A               	movwf	___awmod@sign,c
   981  00095E  AE16               	btfss	___awmod@dividend+1,7,c
   982  000960  D007               	goto	l967
   983  000962  6C15               	negf	___awmod@dividend,c
   984  000964  1E16               	comf	___awmod@dividend+1,f,c
   985  000966  B0D8               	btfsc	status,0,c
   986  000968  2A16               	incf	___awmod@dividend+1,f,c
   987  00096A  0E01               	movlw	1
   988  00096C  6E1A               	movwf	___awmod@sign,c
   989  00096E  D000               	goto	l967
   990  000970                     l967:
   991  000970  AE18               	btfss	___awmod@divisor+1,7,c
   992  000972  D005               	goto	l971
   993  000974  6C17               	negf	___awmod@divisor,c
   994  000976  1E18               	comf	___awmod@divisor+1,f,c
   995  000978  B0D8               	btfsc	status,0,c
   996  00097A  2A18               	incf	___awmod@divisor+1,f,c
   997  00097C  D000               	goto	l971
   998  00097E                     l971:
   999  00097E  5017               	movf	___awmod@divisor,w,c
  1000  000980  1018               	iorwf	___awmod@divisor+1,w,c
  1001  000982  B4D8               	btfsc	status,2,c
  1002  000984  D01D               	goto	l987
  1003  000986  0E01               	movlw	1
  1004  000988  6E19               	movwf	___awmod@counter,c
  1005  00098A  D005               	goto	l977
  1006  00098C                     l975:
  1007  00098C  90D8               	bcf	status,0,c
  1008  00098E  3617               	rlcf	___awmod@divisor,f,c
  1009  000990  3618               	rlcf	___awmod@divisor+1,f,c
  1010  000992  2A19               	incf	___awmod@counter,f,c
  1011  000994  D000               	goto	l977
  1012  000996                     l977:
  1013  000996  BE18               	btfsc	___awmod@divisor+1,7,c
  1014  000998  D002               	goto	l979
  1015  00099A  D7F8               	goto	l975
  1016  00099C  D000               	goto	l979
  1017  00099E                     l979:
  1018  00099E  5017               	movf	___awmod@divisor,w,c
  1019  0009A0  5C15               	subwf	___awmod@dividend,w,c
  1020  0009A2  5018               	movf	___awmod@divisor+1,w,c
  1021  0009A4  5816               	subwfb	___awmod@dividend+1,w,c
  1022  0009A6  A0D8               	btfss	status,0,c
  1023  0009A8  D005               	goto	l983
  1024  0009AA  5017               	movf	___awmod@divisor,w,c
  1025  0009AC  5E15               	subwf	___awmod@dividend,f,c
  1026  0009AE  5018               	movf	___awmod@divisor+1,w,c
  1027  0009B0  5A16               	subwfb	___awmod@dividend+1,f,c
  1028  0009B2  D000               	goto	l983
  1029  0009B4                     l983:
  1030  0009B4  90D8               	bcf	status,0,c
  1031  0009B6  3218               	rrcf	___awmod@divisor+1,f,c
  1032  0009B8  3217               	rrcf	___awmod@divisor,f,c
  1033  0009BA  2E19               	decfsz	___awmod@counter,f,c
  1034  0009BC  D7F0               	goto	l979
  1035  0009BE  D000               	goto	l987
  1036  0009C0                     l987:
  1037  0009C0  501A               	movf	___awmod@sign,w,c
  1038  0009C2  B4D8               	btfsc	status,2,c
  1039  0009C4  D005               	goto	l991
  1040  0009C6  6C15               	negf	___awmod@dividend,c
  1041  0009C8  1E16               	comf	___awmod@dividend+1,f,c
  1042  0009CA  B0D8               	btfsc	status,0,c
  1043  0009CC  2A16               	incf	___awmod@dividend+1,f,c
  1044  0009CE  D000               	goto	l991
  1045  0009D0                     l991:
  1046  0009D0  C015  F015         	movff	___awmod@dividend,?___awmod
  1047  0009D4  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
  1048  0009D8  D000               	goto	l342
  1049  0009DA                     l342:
  1050  0009DA  0012               	return		;funcret
  1051  0009DC                     __end_of___awmod:
  1052                           	opt stack 0
  1053                           tblptru	equ	0xFF8
  1054                           tblptrh	equ	0xFF7
  1055                           intcon	equ	0xFF2
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           indf2	equ	0xFDF
  1059                           fsr2h	equ	0xFDA
  1060                           fsr2l	equ	0xFD9
  1061                           status	equ	0xFD8
  1062                           
  1063 ;; *************** function _init_USART *****************
  1064 ;; Defined at:
  1065 ;;		line 114 in file "main.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;		None
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;		None
  1070 ;; Return value:  Size  Location     Type
  1071 ;;		None               void
  1072 ;; Registers used:
  1073 ;;		wreg, status,2
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1079 ;;      Params:         0       0       0       0       0       0       0
  1080 ;;      Locals:         0       0       0       0       0       0       0
  1081 ;;      Temps:          0       0       0       0       0       0       0
  1082 ;;      Totals:         0       0       0       0       0       0       0
  1083 ;;Total ram usage:        0 bytes
  1084 ;; Hardware stack levels used:    1
  1085 ;; Hardware stack levels required when called:    2
  1086 ;; This function calls:
  1087 ;;		Nothing
  1088 ;; This function is called by:
  1089 ;;		_main
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text4
  1094  000B3E                     __ptext4:
  1095                           	opt stack 0
  1096  000B3E                     _init_USART:
  1097                           	opt stack 28
  1098                           
  1099                           ;main.c: 115: TXSTAbits.TXEN = 1 ;
  1100                           
  1101                           ;incstack = 0
  1102  000B3E  8AAC               	bsf	4012,5,c	;volatile
  1103                           
  1104                           ;main.c: 116: TXSTAbits.BRGH = 1 ;
  1105  000B40  84AC               	bsf	4012,2,c	;volatile
  1106                           
  1107                           ;main.c: 117: RCSTAbits.CREN = 1 ;
  1108  000B42  88AB               	bsf	4011,4,c	;volatile
  1109                           
  1110                           ;main.c: 121: TRISCbits.RC7 = 1 ;
  1111  000B44  8E94               	bsf	3988,7,c	;volatile
  1112                           
  1113                           ;main.c: 122: TRISCbits.RC6 = 0 ;
  1114  000B46  9C94               	bcf	3988,6,c	;volatile
  1115                           
  1116                           ;main.c: 124: SPBRG = 51 ;
  1117  000B48  0E33               	movlw	51
  1118  000B4A  6EAF               	movwf	4015,c	;volatile
  1119                           
  1120                           ;main.c: 126: PIE1bits.RCIE = 1 ;
  1121  000B4C  8A9D               	bsf	3997,5,c	;volatile
  1122                           
  1123                           ;main.c: 127: RCSTAbits.SPEN = 1 ;
  1124  000B4E  8EAB               	bsf	4011,7,c	;volatile
  1125  000B50  0012               	return		;funcret
  1126  000B52                     __end_of_init_USART:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           intcon	equ	0xFF2
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           indf2	equ	0xFDF
  1134                           fsr2h	equ	0xFDA
  1135                           fsr2l	equ	0xFD9
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _init_IOPin *****************
  1139 ;; Defined at:
  1140 ;;		line 130 in file "main.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;		None               void
  1147 ;; Registers used:
  1148 ;;		None
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1154 ;;      Params:         0       0       0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0       0       0
  1157 ;;      Totals:         0       0       0       0       0       0       0
  1158 ;;Total ram usage:        0 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    2
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text5
  1169  000AF2                     __ptext5:
  1170                           	opt stack 0
  1171  000AF2                     _init_IOPin:
  1172                           	opt stack 28
  1173                           
  1174                           ;main.c: 133: ADCON1bits.PCFG = 0b1111 ;
  1175                           
  1176                           ;incstack = 0
  1177  000AF2  80C1               	bsf	4033,0,c	;volatile
  1178  000AF4  82C1               	bsf	4033,1,c	;volatile
  1179  000AF6  84C1               	bsf	4033,2,c	;volatile
  1180  000AF8  86C1               	bsf	4033,3,c	;volatile
  1181                           
  1182                           ;main.c: 134: TRISAbits.TRISA0 = 1 ;
  1183  000AFA  8092               	bsf	3986,0,c	;volatile
  1184                           
  1185                           ;main.c: 135: TRISAbits.TRISA1 = 1 ;
  1186  000AFC  8292               	bsf	3986,1,c	;volatile
  1187                           
  1188                           ;main.c: 136: TRISAbits.TRISA2 = 1 ;
  1189  000AFE  8492               	bsf	3986,2,c	;volatile
  1190                           
  1191                           ;main.c: 137: TRISAbits.TRISA3 = 1 ;
  1192  000B00  8692               	bsf	3986,3,c	;volatile
  1193                           
  1194                           ;main.c: 140: TRISCbits.TRISC0 = 0 ;
  1195  000B02  9094               	bcf	3988,0,c	;volatile
  1196                           
  1197                           ;main.c: 141: TRISCbits.TRISC1 = 0 ;
  1198  000B04  9294               	bcf	3988,1,c	;volatile
  1199                           
  1200                           ;main.c: 142: TRISCbits.TRISC2 = 0 ;
  1201  000B06  9494               	bcf	3988,2,c	;volatile
  1202                           
  1203                           ;main.c: 143: TRISCbits.TRISC3 = 0 ;
  1204  000B08  9694               	bcf	3988,3,c	;volatile
  1205                           
  1206                           ;main.c: 144: TRISCbits.TRISC4 = 0 ;
  1207  000B0A  9894               	bcf	3988,4,c	;volatile
  1208                           
  1209                           ;main.c: 145: TRISCbits.TRISC5 = 0 ;
  1210  000B0C  9A94               	bcf	3988,5,c	;volatile
  1211                           
  1212                           ;main.c: 147: TRISBbits.TRISB0 = 0 ;
  1213  000B0E  9093               	bcf	3987,0,c	;volatile
  1214                           
  1215                           ;main.c: 148: TRISBbits.TRISB1 = 0 ;
  1216  000B10  9293               	bcf	3987,1,c	;volatile
  1217                           
  1218                           ;main.c: 150: PORTBbits.RB1 = 1 ;
  1219  000B12  8281               	bsf	3969,1,c	;volatile
  1220                           
  1221                           ;main.c: 151: PORTBbits.RB0 = 1 ;
  1222  000B14  8081               	bsf	3969,0,c	;volatile
  1223                           
  1224                           ;main.c: 152: PORTCbits.RC5 = 1 ;
  1225  000B16  8A82               	bsf	3970,5,c	;volatile
  1226                           
  1227                           ;main.c: 153: PORTCbits.RC4 = 1 ;
  1228  000B18  8882               	bsf	3970,4,c	;volatile
  1229                           
  1230                           ;main.c: 154: PORTCbits.RC3 = 1 ;
  1231  000B1A  8682               	bsf	3970,3,c	;volatile
  1232                           
  1233                           ;main.c: 155: PORTCbits.RC2 = 1 ;
  1234  000B1C  8482               	bsf	3970,2,c	;volatile
  1235                           
  1236                           ;main.c: 156: PORTCbits.RC1 = 1 ;
  1237  000B1E  8282               	bsf	3970,1,c	;volatile
  1238                           
  1239                           ;main.c: 157: PORTCbits.RC0 = 1 ;
  1240  000B20  8082               	bsf	3970,0,c	;volatile
  1241  000B22  0012               	return		;funcret
  1242  000B24                     __end_of_init_IOPin:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           intcon	equ	0xFF2
  1247                           postinc0	equ	0xFEE
  1248                           wreg	equ	0xFE8
  1249                           indf2	equ	0xFDF
  1250                           fsr2h	equ	0xFDA
  1251                           fsr2l	equ	0xFD9
  1252                           status	equ	0xFD8
  1253                           
  1254 ;; *************** function _UART_Write_Text *****************
  1255 ;; Defined at:
  1256 ;;		line 172 in file "main.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  text            2   21[COMRAM] PTR unsigned char 
  1259 ;;		 -> STR_8(10), STR_7(10), STR_6(10), STR_5(10), 
  1260 ;;		 -> STR_4(10), STR_3(10), STR_2(10), STR_1(18), 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  i               2   25[COMRAM] int 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;		None               void
  1265 ;; Registers used:
  1266 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1272 ;;      Params:         2       0       0       0       0       0       0
  1273 ;;      Locals:         2       0       0       0       0       0       0
  1274 ;;      Temps:          2       0       0       0       0       0       0
  1275 ;;      Totals:         6       0       0       0       0       0       0
  1276 ;;Total ram usage:        6 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; Hardware stack levels required when called:    3
  1279 ;; This function calls:
  1280 ;;		_UART_Write
  1281 ;; This function is called by:
  1282 ;;		_main
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text6
  1287  000A5E                     __ptext6:
  1288                           	opt stack 0
  1289  000A5E                     _UART_Write_Text:
  1290                           	opt stack 27
  1291                           
  1292                           ;main.c: 174: int i;
  1293                           ;main.c: 175: for(i=0;text[i]!='\0';i++)
  1294                           
  1295                           ;incstack = 0
  1296  000A5E  0E00               	movlw	0
  1297  000A60  6E1B               	movwf	UART_Write_Text@i+1,c
  1298  000A62  0E00               	movlw	0
  1299  000A64  6E1A               	movwf	UART_Write_Text@i,c
  1300  000A66  D011               	goto	l1001
  1301  000A68                     l997:
  1302                           
  1303                           ;main.c: 176: UART_Write(text[i]);
  1304  000A68  501A               	movf	UART_Write_Text@i,w,c
  1305  000A6A  2416               	addwf	UART_Write_Text@text,w,c
  1306  000A6C  6E18               	movwf	??_UART_Write_Text& (0+255),c
  1307  000A6E  501B               	movf	UART_Write_Text@i+1,w,c
  1308  000A70  2017               	addwfc	UART_Write_Text@text+1,w,c
  1309  000A72  6E19               	movwf	(??_UART_Write_Text+1)& (0+255),c
  1310  000A74  C018  FFF6         	movff	??_UART_Write_Text,tblptrl
  1311  000A78  C019  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1312  000A7C                     	if	0	;tblptru may be non-zero
  1313  000A7C                     	endif
  1314  000A7C                     	if	0	;tblptru may be non-zero
  1315  000A7C                     	endif
  1316  000A7C  0008               	tblrd		*
  1317  000A7E  50F5               	movf	tablat,w,c
  1318  000A80  ECA9  F005         	call	_UART_Write
  1319  000A84  4A1A               	infsnz	UART_Write_Text@i,f,c
  1320  000A86  2A1B               	incf	UART_Write_Text@i+1,f,c
  1321  000A88  D000               	goto	l1001
  1322  000A8A                     l1001:
  1323  000A8A  501A               	movf	UART_Write_Text@i,w,c
  1324  000A8C  2416               	addwf	UART_Write_Text@text,w,c
  1325  000A8E  6E18               	movwf	??_UART_Write_Text& (0+255),c
  1326  000A90  501B               	movf	UART_Write_Text@i+1,w,c
  1327  000A92  2017               	addwfc	UART_Write_Text@text+1,w,c
  1328  000A94  6E19               	movwf	(??_UART_Write_Text+1)& (0+255),c
  1329  000A96  C018  FFF6         	movff	??_UART_Write_Text,tblptrl
  1330  000A9A  C019  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1331  000A9E                     	if	0	;tblptru may be non-zero
  1332  000A9E                     	endif
  1333  000A9E                     	if	0	;tblptru may be non-zero
  1334  000A9E                     	endif
  1335  000A9E  0008               	tblrd		*
  1336  000AA0  50F5               	movf	tablat,w,c
  1337  000AA2  0900               	iorlw	0
  1338  000AA4  A4D8               	btfss	status,2,c
  1339  000AA6  D7E0               	goto	l997
  1340  000AA8  0012               	return		;funcret
  1341  000AAA                     __end_of_UART_Write_Text:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           intcon	equ	0xFF2
  1348                           postinc0	equ	0xFEE
  1349                           wreg	equ	0xFE8
  1350                           indf2	equ	0xFDF
  1351                           fsr2h	equ	0xFDA
  1352                           fsr2l	equ	0xFD9
  1353                           status	equ	0xFD8
  1354                           
  1355 ;; *************** function _UART_Write *****************
  1356 ;; Defined at:
  1357 ;;		line 166 in file "main.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;  data            1    wreg     unsigned char 
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;  data            1   20[COMRAM] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;		None               void
  1364 ;; Registers used:
  1365 ;;		wreg
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1371 ;;      Params:         0       0       0       0       0       0       0
  1372 ;;      Locals:         1       0       0       0       0       0       0
  1373 ;;      Temps:          0       0       0       0       0       0       0
  1374 ;;      Totals:         1       0       0       0       0       0       0
  1375 ;;Total ram usage:        1 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    2
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_UART_Write_Text
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text7
  1386  000B52                     __ptext7:
  1387                           	opt stack 0
  1388  000B52                     _UART_Write:
  1389                           	opt stack 27
  1390                           
  1391                           ;incstack = 0
  1392                           ;UART_Write@data stored from wreg
  1393  000B52  6E15               	movwf	UART_Write@data,c
  1394                           
  1395                           ;main.c: 168: while(!TRMT);
  1396  000B54  D000               	goto	l75
  1397  000B56                     l75:
  1398  000B56  A2AC               	btfss	4012,1,c	;volatile
  1399  000B58  D7FE               	goto	l75
  1400                           
  1401                           ;main.c: 169: TXREG = data;
  1402  000B5A  C015  FFAD         	movff	UART_Write@data,4013	;volatile
  1403  000B5E  0012               	return		;funcret
  1404  000B60                     __end_of_UART_Write:
  1405                           	opt stack 0
  1406                           tblptru	equ	0xFF8
  1407                           tblptrh	equ	0xFF7
  1408                           tblptrl	equ	0xFF6
  1409                           tablat	equ	0xFF5
  1410                           intcon	equ	0xFF2
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           indf2	equ	0xFDF
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _ISR *****************
  1419 ;; Defined at:
  1420 ;;		line 294 in file "main.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;		None               void
  1427 ;; Registers used:
  1428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1434 ;;      Params:         0       0       0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0
  1436 ;;      Temps:         14       0       0       0       0       0       0
  1437 ;;      Totals:        14       0       0       0       0       0       0
  1438 ;;Total ram usage:       14 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    1
  1441 ;; This function calls:
  1442 ;;		_UART_Read
  1443 ;;		i2___awmod
  1444 ;; This function is called by:
  1445 ;;		Interrupt level 2
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	intcode
  1450  000008                     __pintcode:
  1451                           	opt stack 0
  1452  000008                     _ISR:
  1453                           	opt stack 27
  1454                           
  1455                           ;incstack = 0
  1456  000008  CFFA F007          	movff	pclath,??_ISR
  1457  00000C  CFFB F008          	movff	pclatu,??_ISR+1
  1458  000010  CFE9 F009          	movff	fsr0l,??_ISR+2
  1459  000014  ED60  F004         	call	int_func,f	;refresh shadow registers
  1460                           pclatu	equ	0xFFB
  1461                           pclath	equ	0xFFA
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           intcon	equ	0xFF2
  1467                           postinc0	equ	0xFEE
  1468                           fsr0l	equ	0xFE9
  1469                           wreg	equ	0xFE8
  1470                           indf2	equ	0xFDF
  1471                           fsr2h	equ	0xFDA
  1472                           fsr2l	equ	0xFD9
  1473                           status	equ	0xFD8
  1474                           
  1475                           	psect	intcode_body
  1476  0008C0                     __pintcode_body:
  1477                           	opt stack 27
  1478  0008C0                     int_func:
  1479                           	opt stack 27
  1480  0008C0  0006               	pop		; remove dummy address from shadow register refresh
  1481  0008C2  CFEA F00A          	movff	fsr0h,??_ISR+3
  1482  0008C6  CFE1 F00B          	movff	fsr1l,??_ISR+4
  1483  0008CA  CFE2 F00C          	movff	fsr1h,??_ISR+5
  1484  0008CE  CFD9 F00D          	movff	fsr2l,??_ISR+6
  1485  0008D2  CFDA F00E          	movff	fsr2h,??_ISR+7
  1486  0008D6  CFF3 F00F          	movff	prodl,??_ISR+8
  1487  0008DA  CFF4 F010          	movff	prodh,??_ISR+9
  1488  0008DE  CFF6 F011          	movff	tblptrl,??_ISR+10
  1489  0008E2  CFF7 F012          	movff	tblptrh,??_ISR+11
  1490  0008E6  CFF8 F013          	movff	tblptru,??_ISR+12
  1491  0008EA  CFF5 F014          	movff	tablat,??_ISR+13
  1492                           
  1493                           ;main.c: 296: if(PIR1bits.RCIF)
  1494  0008EE  AA9E               	btfss	3998,5,c	;volatile
  1495  0008F0  D017               	goto	i2l133
  1496                           
  1497                           ;main.c: 297: {
  1498                           ;main.c: 298: RxBuffer[iRx%10] = UART_Read() ;
  1499  0008F2  C037  F001         	movff	_iRx,i2___awmod@dividend
  1500  0008F6  C038  F002         	movff	_iRx+1,i2___awmod@dividend+1
  1501  0008FA  0E00               	movlw	0
  1502  0008FC  6E04               	movwf	i2___awmod@divisor+1,c
  1503  0008FE  0E0A               	movlw	10
  1504  000900  6E03               	movwf	i2___awmod@divisor,c
  1505  000902  ECEE  F004         	call	i2___awmod	;wreg free
  1506  000906  0E23               	movlw	low _RxBuffer
  1507  000908  2401               	addwf	?i2___awmod,w,c
  1508  00090A  6ED9               	movwf	fsr2l,c
  1509  00090C  0E00               	movlw	high _RxBuffer
  1510  00090E  2002               	addwfc	?i2___awmod+1,w,c
  1511  000910  6EDA               	movwf	fsr2h,c
  1512  000912  ECB0  F005         	call	_UART_Read	;wreg free
  1513  000916  6EDF               	movwf	indf2,c
  1514                           
  1515                           ;main.c: 299: iRx++ ;
  1516  000918  4A37               	infsnz	_iRx,f,c
  1517  00091A  2A38               	incf	_iRx+1,f,c
  1518                           
  1519                           ;main.c: 300: PIR1bits.RCIF = 0;
  1520  00091C  9A9E               	bcf	3998,5,c	;volatile
  1521  00091E  D000               	goto	i2l133
  1522  000920                     i2l133:
  1523  000920  C014  FFF5         	movff	??_ISR+13,tablat
  1524  000924  C013  FFF8         	movff	??_ISR+12,tblptru
  1525  000928  C012  FFF7         	movff	??_ISR+11,tblptrh
  1526  00092C  C011  FFF6         	movff	??_ISR+10,tblptrl
  1527  000930  C010  FFF4         	movff	??_ISR+9,prodh
  1528  000934  C00F  FFF3         	movff	??_ISR+8,prodl
  1529  000938  C00E  FFDA         	movff	??_ISR+7,fsr2h
  1530  00093C  C00D  FFD9         	movff	??_ISR+6,fsr2l
  1531  000940  C00C  FFE2         	movff	??_ISR+5,fsr1h
  1532  000944  C00B  FFE1         	movff	??_ISR+4,fsr1l
  1533  000948  C00A  FFEA         	movff	??_ISR+3,fsr0h
  1534  00094C  C009  FFE9         	movff	??_ISR+2,fsr0l
  1535  000950  C008  FFFB         	movff	??_ISR+1,pclatu
  1536  000954  C007  FFFA         	movff	??_ISR,pclath
  1537  000958  0011               	retfie		f
  1538  00095A                     __end_of_ISR:
  1539                           	opt stack 0
  1540                           pclatu	equ	0xFFB
  1541                           pclath	equ	0xFFA
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           prodh	equ	0xFF4
  1547                           prodl	equ	0xFF3
  1548                           intcon	equ	0xFF2
  1549                           postinc0	equ	0xFEE
  1550                           fsr0h	equ	0xFEA
  1551                           fsr0l	equ	0xFE9
  1552                           wreg	equ	0xFE8
  1553                           fsr1h	equ	0xFE2
  1554                           fsr1l	equ	0xFE1
  1555                           indf2	equ	0xFDF
  1556                           fsr2h	equ	0xFDA
  1557                           fsr2l	equ	0xFD9
  1558                           status	equ	0xFD8
  1559                           
  1560 ;; *************** function i2___awmod *****************
  1561 ;; Defined at:
  1562 ;;		line 8 in file "/Applications/microchip/xc8/v1.34/sources/common/awmod.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  dividend        2    0[COMRAM] int 
  1565 ;;  divisor         2    2[COMRAM] int 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  __awmod         1    5[COMRAM] unsigned char 
  1568 ;;  __awmod         1    4[COMRAM] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  2    0[COMRAM] int 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1578 ;;      Params:         4       0       0       0       0       0       0
  1579 ;;      Locals:         2       0       0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0       0       0
  1581 ;;      Totals:         6       0       0       0       0       0       0
  1582 ;;Total ram usage:        6 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_ISR
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text9
  1592  0009DC                     __ptext9:
  1593                           	opt stack 0
  1594  0009DC                     i2___awmod:
  1595                           	opt stack 27
  1596                           
  1597                           ;incstack = 0
  1598  0009DC  0E00               	movlw	0
  1599  0009DE  6E06               	movwf	i2___awmod@sign,c
  1600  0009E0  AE02               	btfss	i2___awmod@dividend+1,7,c
  1601  0009E2  D007               	goto	i2l1055
  1602  0009E4  6C01               	negf	i2___awmod@dividend,c
  1603  0009E6  1E02               	comf	i2___awmod@dividend+1,f,c
  1604  0009E8  B0D8               	btfsc	status,0,c
  1605  0009EA  2A02               	incf	i2___awmod@dividend+1,f,c
  1606  0009EC  0E01               	movlw	1
  1607  0009EE  6E06               	movwf	i2___awmod@sign,c
  1608  0009F0  D000               	goto	i2l1055
  1609  0009F2                     i2l1055:
  1610  0009F2  AE04               	btfss	i2___awmod@divisor+1,7,c
  1611  0009F4  D005               	goto	i2l1059
  1612  0009F6  6C03               	negf	i2___awmod@divisor,c
  1613  0009F8  1E04               	comf	i2___awmod@divisor+1,f,c
  1614  0009FA  B0D8               	btfsc	status,0,c
  1615  0009FC  2A04               	incf	i2___awmod@divisor+1,f,c
  1616  0009FE  D000               	goto	i2l1059
  1617  000A00                     i2l1059:
  1618  000A00  5003               	movf	i2___awmod@divisor,w,c
  1619  000A02  1004               	iorwf	i2___awmod@divisor+1,w,c
  1620  000A04  B4D8               	btfsc	status,2,c
  1621  000A06  D01D               	goto	i2l1075
  1622  000A08  0E01               	movlw	1
  1623  000A0A  6E05               	movwf	i2___awmod@counter,c
  1624  000A0C  D005               	goto	i2l1065
  1625  000A0E                     i2l1063:
  1626  000A0E  90D8               	bcf	status,0,c
  1627  000A10  3603               	rlcf	i2___awmod@divisor,f,c
  1628  000A12  3604               	rlcf	i2___awmod@divisor+1,f,c
  1629  000A14  2A05               	incf	i2___awmod@counter,f,c
  1630  000A16  D000               	goto	i2l1065
  1631  000A18                     i2l1065:
  1632  000A18  BE04               	btfsc	i2___awmod@divisor+1,7,c
  1633  000A1A  D002               	goto	i2l1067
  1634  000A1C  D7F8               	goto	i2l1063
  1635  000A1E  D000               	goto	i2l1067
  1636  000A20                     i2l1067:
  1637  000A20  5003               	movf	i2___awmod@divisor,w,c
  1638  000A22  5C01               	subwf	i2___awmod@dividend,w,c
  1639  000A24  5004               	movf	i2___awmod@divisor+1,w,c
  1640  000A26  5802               	subwfb	i2___awmod@dividend+1,w,c
  1641  000A28  A0D8               	btfss	status,0,c
  1642  000A2A  D005               	goto	i2l1071
  1643  000A2C  5003               	movf	i2___awmod@divisor,w,c
  1644  000A2E  5E01               	subwf	i2___awmod@dividend,f,c
  1645  000A30  5004               	movf	i2___awmod@divisor+1,w,c
  1646  000A32  5A02               	subwfb	i2___awmod@dividend+1,f,c
  1647  000A34  D000               	goto	i2l1071
  1648  000A36                     i2l1071:
  1649  000A36  90D8               	bcf	status,0,c
  1650  000A38  3204               	rrcf	i2___awmod@divisor+1,f,c
  1651  000A3A  3203               	rrcf	i2___awmod@divisor,f,c
  1652  000A3C  2E05               	decfsz	i2___awmod@counter,f,c
  1653  000A3E  D7F0               	goto	i2l1067
  1654  000A40  D000               	goto	i2l1075
  1655  000A42                     i2l1075:
  1656  000A42  5006               	movf	i2___awmod@sign,w,c
  1657  000A44  B4D8               	btfsc	status,2,c
  1658  000A46  D005               	goto	i2l1079
  1659  000A48  6C01               	negf	i2___awmod@dividend,c
  1660  000A4A  1E02               	comf	i2___awmod@dividend+1,f,c
  1661  000A4C  B0D8               	btfsc	status,0,c
  1662  000A4E  2A02               	incf	i2___awmod@dividend+1,f,c
  1663  000A50  D000               	goto	i2l1079
  1664  000A52                     i2l1079:
  1665  000A52  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  1666  000A56  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  1667  000A5A  D000               	goto	i2l342
  1668  000A5C                     i2l342:
  1669  000A5C  0012               	return		;funcret
  1670  000A5E                     __end_ofi2___awmod:
  1671                           	opt stack 0
  1672                           pclatu	equ	0xFFB
  1673                           pclath	equ	0xFFA
  1674                           tblptru	equ	0xFF8
  1675                           tblptrh	equ	0xFF7
  1676                           tblptrl	equ	0xFF6
  1677                           tablat	equ	0xFF5
  1678                           prodh	equ	0xFF4
  1679                           prodl	equ	0xFF3
  1680                           intcon	equ	0xFF2
  1681                           postinc0	equ	0xFEE
  1682                           fsr0h	equ	0xFEA
  1683                           fsr0l	equ	0xFE9
  1684                           wreg	equ	0xFE8
  1685                           fsr1h	equ	0xFE2
  1686                           fsr1l	equ	0xFE1
  1687                           indf2	equ	0xFDF
  1688                           fsr2h	equ	0xFDA
  1689                           fsr2l	equ	0xFD9
  1690                           status	equ	0xFD8
  1691                           
  1692 ;; *************** function _UART_Read *****************
  1693 ;; Defined at:
  1694 ;;		line 160 in file "main.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;		None
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  1    wreg      unsigned char 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1708 ;;      Params:         0       0       0       0       0       0       0
  1709 ;;      Locals:         0       0       0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0
  1711 ;;      Totals:         0       0       0       0       0       0       0
  1712 ;;Total ram usage:        0 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_ISR
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text10
  1722  000B60                     __ptext10:
  1723                           	opt stack 0
  1724  000B60                     _UART_Read:
  1725                           	opt stack 27
  1726                           
  1727                           ;main.c: 162: while(!RCIF);
  1728                           
  1729                           ;incstack = 0
  1730  000B60  D000               	goto	i2l69
  1731  000B62                     i2l69:
  1732  000B62  AA9E               	btfss	3998,5,c	;volatile
  1733  000B64  D7FE               	goto	i2l69
  1734                           
  1735                           ;main.c: 163: return RCREG;
  1736  000B66  50AE               	movf	4014,w,c	;volatile
  1737  000B68  D000               	goto	i2l72
  1738  000B6A                     i2l72:
  1739  000B6A  0012               	return		;funcret
  1740  000B6C                     __end_of_UART_Read:
  1741                           	opt stack 0
  1742                           pclatu	equ	0xFFB
  1743                           pclath	equ	0xFFA
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           prodh	equ	0xFF4
  1749                           prodl	equ	0xFF3
  1750                           intcon	equ	0xFF2
  1751                           postinc0	equ	0xFEE
  1752                           fsr0h	equ	0xFEA
  1753                           fsr0l	equ	0xFE9
  1754                           wreg	equ	0xFE8
  1755                           fsr1h	equ	0xFE2
  1756                           fsr1l	equ	0xFE1
  1757                           indf2	equ	0xFDF
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           pclatu	equ	0xFFB
  1762                           pclath	equ	0xFFA
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           prodh	equ	0xFF4
  1768                           prodl	equ	0xFF3
  1769                           intcon	equ	0xFF2
  1770                           postinc0	equ	0xFEE
  1771                           fsr0h	equ	0xFEA
  1772                           fsr0l	equ	0xFE9
  1773                           wreg	equ	0xFE8
  1774                           fsr1h	equ	0xFE2
  1775                           fsr1l	equ	0xFE1
  1776                           indf2	equ	0xFDF
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781                           	psect	rparam
  1782  0000                     pclatu	equ	0xFFB
  1783                           pclath	equ	0xFFA
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           prodh	equ	0xFF4
  1789                           prodl	equ	0xFF3
  1790                           intcon	equ	0xFF2
  1791                           postinc0	equ	0xFEE
  1792                           fsr0h	equ	0xFEA
  1793                           fsr0l	equ	0xFE9
  1794                           wreg	equ	0xFE8
  1795                           fsr1h	equ	0xFE2
  1796                           fsr1l	equ	0xFE1
  1797                           indf2	equ	0xFDF
  1798                           fsr2h	equ	0xFDA
  1799                           fsr2l	equ	0xFD9
  1800                           status	equ	0xFD8


Data Sizes:
    Strings     88
    Constant    0
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     34      61
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 18
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_UART_Write_Text
    _main->_parseMessage
    _parseMessage->___awmod
    _UART_Write_Text->_UART_Write

Critical Paths under _ISR in COMRAM

    _ISR->i2___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5    2528
                                             27 COMRAM     7     2      5
                    _UART_Write_Text
                            ___awmod
                         _init_IOPin
                         _init_USART
                       _parseMessage
                     _read_id_module
 ---------------------------------------------------------------------------------
 (1) _read_id_module                                       4     2      2      27
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _parseMessage                                         1     1      0     986
                                             26 COMRAM     1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     986
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_USART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_IOPin                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      6     4      2     529
                                             21 COMRAM     6     4      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      15
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 14    14      0     348
                                              6 COMRAM    14    14      0
                          _UART_Read
                          i2___awmod
 ---------------------------------------------------------------------------------
 (4) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Write_Text
     _UART_Write
   ___awmod
   _init_IOPin
   _init_USART
   _parseMessage
     ___awmod
   _read_id_module

 _ISR (ROOT)
   _UART_Read
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     22      3D       1       48.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      15        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May  8 18:38:20 2015

                      l75 0B56                        l91 0AF0               __CFG_BORV$3 000000  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000               __CFG_OSC$HS 000000                       l110 071A  
                     l104 06D2                       l113 073E                       l122 07AA  
                     l107 06F6                       l116 0762                       l125 07CE  
                     l119 0786                       l342 09DA                       l971 097E  
                     l991 09D0                       l983 09B4                       l975 098C  
                     l967 0970                       l977 0996                       l979 099E  
                     l987 09C0                       l997 0A68              __CFG_CPB$OFF 000000  
            __CFG_CPD$OFF 000000                       _ISR 0008           _valueBrocheRead 003D  
                     _iRx 0037              ___awmod@sign 001A                       wreg 000FE8  
        ??_read_id_module 0017              __CFG_LVP$OFF 000000                      ?_ISR 0001  
            __CFG_WDT$OFF 000000                      l1001 0A8A                      l1021 0AE6  
                    l1013 0ACA                      l1031 082A                      l1017 0AD8  
                    l1009 0ABC                      l1131 0742                      l1123 071E  
                    l1115 06FA                      l1107 06D6                      l1029 0824  
                    l1155 07AE                      l1147 078A                      l1139 0766  
                    l1095 067C                      STR_1 0601                      STR_2 0613  
                    STR_3 061D                      STR_4 0627                      STR_5 0631  
                    STR_6 063B                      STR_7 0645                      STR_8 064F  
                    _RCIF 007CF5                      i2l72 0B6A                      i2l69 0B62  
                    _TRMT 007D61              __CFG_PWRT$ON 000000                      _main 065A  
                    fsr0h 000FEA                      fsr1h 000FE2                      fsr0l 000FE9  
                    fsr2h 000FDA                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9                      pclat 000FFA                      prodh 000FF4  
                    prodl 000FF3                      start 0018             __CFG_IESO$OFF 000000  
           __CFG_MCLRE$ON 000000              ___param_bank 000010   __end_of_UART_Write_Text 0AAA  
                   ??_ISR 0007                     ?_main 001C           __end_of___awmod 09DC  
                   i2l133 0920                     i2l342 0A5C                     _RCREG 000FAE  
                   _SPBRG 000FAF                     _TXREG 000FAD             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000               ?_UART_Write 0001  
      __size_of_UART_Read 000C             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000                     tablat 000FF5  
                   status 000FD8        __size_ofi2___awmod 0082           __initialization 0B24  
            __end_of_main 07D6                    ??_main 0021             __activetblptr 000001  
            _idBrocheRead 003B                    i2l1071 0A36                    i2l1063 0A0E  
                  i2l1055 09F2                    i2l1065 0A18                    i2l1067 0A20  
                  i2l1075 0A42                    i2l1059 0A00                    i2l1079 0A52  
          __CFG_XINST$OFF 000000         __end_of_UART_Read 0B6C       __size_of_UART_Write 000E  
          __CFG_STVREN$ON 000000                 ??___awmod 0019          ?_UART_Write_Text 0016  
                  clear_0 0B2A           ___awmod@divisor 0017           ___awmod@counter 0019  
       __end_ofi2___awmod 0A5E              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8            i2___awmod@sign 0006  
            _idModuleRead 003C                __accesstop 0080   __end_of__initialization 0B30  
         __CFG_PBADEN$OFF 000000             ?_parseMessage 0001             ___rparam_used 000001  
          __pcstackCOMRAM 0001                _iRxLecture 0039           __CFG_LPT1OSC$ON 000000  
          ??_parseMessage 001B        __CFG_CCP2MX$PORTBE 000000              ??_UART_Write 0015  
                 __Hparam 0000                   __Lparam 0000                _init_IOPin 0AF2  
              _init_USART 0B3E                   ___awmod 095A        __end_of_UART_Write 0B60  
            __psmallconst 0600                   __pcinit 0B24                   __ramtop 0600  
                 __ptext0 065A                   __ptext1 0AAA                   __ptext2 07D6  
                 __ptext3 095A                   __ptext4 0B3E                   __ptext5 0AF2  
                 __ptext6 0A5E                   __ptext7 0B52                   __ptext9 09DC  
            __size_of_ISR 0952          read_id_module@id 0017          ___awmod@dividend 0015  
          __pintcode_body 08C0      end_of_initialization 0B30                   int_func 08C0  
 __size_of_read_id_module 0048                 _RCSTAbits 000FAB                   postinc0 000FEE  
               _UART_Read 0B60                 _PORTAbits 000F80                 _PORTBbits 000F81  
               _PORTCbits 000F82            UART_Write@data 0015      __end_of_parseMessage 08C0  
               _TRISAbits 000F92                 _TRISBbits 000F93                 _TRISCbits 000F94  
               i2___awmod 09DC                 _TXSTAbits 000FAC               ?_init_IOPin 0001  
             ?_init_USART 0001                ?_UART_Read 0001  __size_of_UART_Write_Text 004C  
     start_initialization 0B24               __end_of_ISR 095A                ?i2___awmod 0001  
             __pbssCOMRAM 0023       __size_of_init_IOPin 0032       __size_of_init_USART 0014  
          _read_id_module 0AAA                 __pintcode 0008                  ?___awmod 0015  
   __size_of_parseMessage 00EA               ??_UART_Read 0001               __smallconst 0600  
             ??i2___awmod 0005         ??_UART_Write_Text 0018    __end_of_read_id_module 0AF2  
            _parseMessage 07D6                  _PIE1bits 000F9D                  _PIR1bits 000F9E  
        __CFG_WDTPS$32768 000000                _ADCON1bits 000FC1        i2___awmod@dividend 0001  
         ?_read_id_module 0015                  _RxBuffer 0023                  __Hrparam 0000  
            ??_init_IOPin 0015              ??_init_USART 0015                  _TxBuffer 002D  
                __Lrparam 0000              __Lsmallconst 0600        __CFG_BOREN$SBORDIS 000000  
        __size_of___awmod 0082                  __ptext10 0B60        __end_of_init_IOPin 0B24  
      __end_of_init_USART 0B52       UART_Write_Text@text 0016             __size_of_main 017C  
                main@argc 001C                  main@argv 001E         i2___awmod@divisor 0003  
       i2___awmod@counter 0005               _OSCTUNEbits 000F9B                _INTCONbits 000FF2  
                intlevel2 0000                _OSCCONbits 000FD3           _UART_Write_Text 0A5E  
              _UART_Write 0B52          UART_Write_Text@i 001A  
