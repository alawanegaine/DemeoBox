

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed May  6 11:34:23 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    23  0000                     _ADCON1bits	set	4033
    24  0000                     _INTCONbits	set	4082
    25  0000                     _OSCCONbits	set	4051
    26  0000                     _OSCTUNEbits	set	3995
    27  0000                     _PIE1bits	set	3997
    28  0000                     _PIR1bits	set	3998
    29  0000                     _PORTAbits	set	3968
    30  0000                     _PORTBbits	set	3969
    31  0000                     _PORTCbits	set	3970
    32  0000                     _RCREG	set	4014
    33  0000                     _RCSTAbits	set	4011
    34  0000                     _SPBRG	set	4015
    35  0000                     _TRISAbits	set	3986
    36  0000                     _TRISBbits	set	3987
    37  0000                     _TRISCbits	set	3988
    38  0000                     _TXREG	set	4013
    39  0000                     _TXSTAbits	set	4012
    40  0000                     _RCIF	set	31989
    41  0000                     _TRMT	set	32097
    42                           
    43                           	psect	smallconst
    44  000600                     __psmallconst:
    45                           	opt stack 0
    46  000600  00                 	db	0
    47  000601                     STR_1:
    48  000601  42                 	db	66	;'B'
    49  000602  52                 	db	82	;'R'
    50  000603  4F                 	db	79	;'O'
    51  000604  43                 	db	67	;'C'
    52  000605  48                 	db	72	;'H'
    53  000606  45                 	db	69	;'E'
    54  000607  20                 	db	32
    55  000608  31                 	db	49	;'1'
    56  000609  0A                 	db	10
    57  00060A  00                 	db	0
    58  00060B                     STR_2:
    59  00060B  42                 	db	66	;'B'
    60  00060C  52                 	db	82	;'R'
    61  00060D  4F                 	db	79	;'O'
    62  00060E  43                 	db	67	;'C'
    63  00060F  48                 	db	72	;'H'
    64  000610  45                 	db	69	;'E'
    65  000611  20                 	db	32
    66  000612  32                 	db	50	;'2'
    67  000613  0A                 	db	10
    68  000614  00                 	db	0
    69  000615                     STR_3:
    70  000615  42                 	db	66	;'B'
    71  000616  52                 	db	82	;'R'
    72  000617  4F                 	db	79	;'O'
    73  000618  43                 	db	67	;'C'
    74  000619  48                 	db	72	;'H'
    75  00061A  45                 	db	69	;'E'
    76  00061B  20                 	db	32
    77  00061C  33                 	db	51	;'3'
    78  00061D  0A                 	db	10
    79  00061E  00                 	db	0
    80  00061F                     STR_4:
    81  00061F  42                 	db	66	;'B'
    82  000620  52                 	db	82	;'R'
    83  000621  4F                 	db	79	;'O'
    84  000622  43                 	db	67	;'C'
    85  000623  48                 	db	72	;'H'
    86  000624  45                 	db	69	;'E'
    87  000625  20                 	db	32
    88  000626  34                 	db	52	;'4'
    89  000627  0A                 	db	10
    90  000628  00                 	db	0
    91  000629                     STR_5:
    92  000629  42                 	db	66	;'B'
    93  00062A  52                 	db	82	;'R'
    94  00062B  4F                 	db	79	;'O'
    95  00062C  43                 	db	67	;'C'
    96  00062D  48                 	db	72	;'H'
    97  00062E  45                 	db	69	;'E'
    98  00062F  20                 	db	32
    99  000630  35                 	db	53	;'5'
   100  000631  0A                 	db	10
   101  000632  00                 	db	0
   102  000633                     STR_6:
   103  000633  42                 	db	66	;'B'
   104  000634  52                 	db	82	;'R'
   105  000635  4F                 	db	79	;'O'
   106  000636  43                 	db	67	;'C'
   107  000637  48                 	db	72	;'H'
   108  000638  45                 	db	69	;'E'
   109  000639  20                 	db	32
   110  00063A  36                 	db	54	;'6'
   111  00063B  0A                 	db	10
   112  00063C  00                 	db	0
   113  00063D                     STR_7:
   114  00063D  42                 	db	66	;'B'
   115  00063E  52                 	db	82	;'R'
   116  00063F  4F                 	db	79	;'O'
   117  000640  43                 	db	67	;'C'
   118  000641  48                 	db	72	;'H'
   119  000642  45                 	db	69	;'E'
   120  000643  20                 	db	32
   121  000644  37                 	db	55	;'7'
   122  000645  0A                 	db	10
   123  000646  00                 	db	0
   124  000647                     STR_8:
   125  000647  42                 	db	66	;'B'
   126  000648  52                 	db	82	;'R'
   127  000649  4F                 	db	79	;'O'
   128  00064A  43                 	db	67	;'C'
   129  00064B  48                 	db	72	;'H'
   130  00064C  45                 	db	69	;'E'
   131  00064D  20                 	db	32
   132  00064E  38                 	db	56	;'8'
   133  00064F  0A                 	db	10
   134  000650  00                 	db	0
   135                           
   136                           ; #config settings
   137  000651  00                 	db	0	; dummy byte at the end
   138  0000                     
   139                           	psect	cinit
   140  000AC8                     __pcinit:
   141                           	opt stack 0
   142  000AC8                     start_initialization:
   143                           	opt stack 0
   144  000AC8                     __initialization:
   145                           	opt stack 0
   146                           
   147                           ; Clear objects allocated to COMRAM (27 bytes)
   148  000AC8  EE00  F023         	lfsr	0,__pbssCOMRAM
   149  000ACC  0E1B               	movlw	27
   150  000ACE                     clear_0:
   151  000ACE  6AEE               	clrf	postinc0,c
   152  000AD0  06E8               	decf	wreg,f,c
   153  000AD2  E1FD               	bnz	clear_0
   154  000AD4                     end_of_initialization:
   155                           	opt stack 0
   156  000AD4                     __end_of__initialization:
   157                           	opt stack 0
   158  000AD4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   159  000AD6  6EF8               	movwf	tblptru,c
   160  000AD8  0E06               	movlw	high __Lsmallconst
   161  000ADA  6EF7               	movwf	tblptrh,c
   162  000ADC  0100               	movlb	0
   163  000ADE  EF29  F003         	goto	_main	;jump to C main() function
   164                           tblptru	equ	0xFF8
   165                           tblptrh	equ	0xFF7
   166                           postinc0	equ	0xFEE
   167                           wreg	equ	0xFE8
   168                           
   169                           	psect	bssCOMRAM
   170  000023                     __pbssCOMRAM:
   171                           	opt stack 0
   172  000023                     _RxBuffer:
   173                           	opt stack 0
   174  000023                     	ds	10
   175  00002D                     _TxBuffer:
   176                           	opt stack 0
   177  00002D                     	ds	10
   178  000037                     _iRx:
   179                           	opt stack 0
   180  000037                     	ds	2
   181  000039                     _iRxLecture:
   182                           	opt stack 0
   183  000039                     	ds	2
   184  00003B                     _idBrocheRead:
   185                           	opt stack 0
   186  00003B                     	ds	1
   187  00003C                     _idModuleRead:
   188                           	opt stack 0
   189  00003C                     	ds	1
   190  00003D                     _valueBrocheRead:
   191                           	opt stack 0
   192  00003D                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           postinc0	equ	0xFEE
   196                           wreg	equ	0xFE8
   197                           
   198                           	psect	cstackCOMRAM
   199  000001                     __pcstackCOMRAM:
   200                           	opt stack 0
   201  000001                     ?i2___awmod:
   202                           	opt stack 0
   203  000001                     i2___awmod@dividend:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x0
   207  000001                     	ds	2
   208  000003                     i2___awmod@divisor:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x2
   212  000003                     	ds	2
   213  000005                     i2___awmod@counter:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x4
   217  000005                     	ds	1
   218  000006                     i2___awmod@sign:
   219                           	opt stack 0
   220                           
   221                           ; 1 bytes @ 0x5
   222  000006                     	ds	1
   223  000007                     ??_ISR:
   224                           
   225                           ; 0 bytes @ 0x6
   226  000007                     	ds	14
   227  000015                     ?_read_id_module:
   228                           	opt stack 0
   229  000015                     ?___awmod:
   230                           	opt stack 0
   231  000015                     UART_Write@data:
   232                           	opt stack 0
   233  000015                     ___awmod@dividend:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x14
   237  000015                     	ds	1
   238  000016                     UART_Write_Text@text:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x15
   242  000016                     	ds	1
   243  000017                     read_id_module@id:
   244                           	opt stack 0
   245  000017                     ___awmod@divisor:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x16
   249  000017                     	ds	1
   250  000018                     ??_UART_Write_Text:
   251                           
   252                           ; 0 bytes @ 0x17
   253  000018                     	ds	1
   254  000019                     ___awmod@counter:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x18
   258  000019                     	ds	1
   259  00001A                     ___awmod@sign:
   260                           	opt stack 0
   261  00001A                     UART_Write_Text@i:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x19
   265  00001A                     	ds	1
   266  00001B                     
   267                           ; 0 bytes @ 0x1A
   268  00001B                     	ds	1
   269  00001C                     
   270                           ; 2 bytes @ 0x1B
   271  00001C                     	ds	2
   272  00001E                     
   273                           ; 3 bytes @ 0x1D
   274  00001E                     	ds	3
   275  000021                     ??_main:
   276                           
   277                           ; 0 bytes @ 0x20
   278  000021                     	ds	2
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284 ;;
   285 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   286 ;;
   287 ;; *************** function _main *****************
   288 ;; Defined at:
   289 ;;		line 215 in file "main.c"
   290 ;; Parameters:    Size  Location     Type
   291 ;;  argc            2   27[COMRAM] int 
   292 ;;  argv            3   29[COMRAM] PTR PTR unsigned char 
   293 ;; Auto vars:     Size  Location     Type
   294 ;;		None
   295 ;; Return value:  Size  Location     Type
   296 ;;                  2   27[COMRAM] int 
   297 ;; Registers used:
   298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   304 ;;      Params:         5       0       0       0       0       0       0
   305 ;;      Locals:         0       0       0       0       0       0       0
   306 ;;      Temps:          2       0       0       0       0       0       0
   307 ;;      Totals:         7       0       0       0       0       0       0
   308 ;;Total ram usage:        7 bytes
   309 ;; Hardware stack levels required when called:    4
   310 ;; This function calls:
   311 ;;		_UART_Write_Text
   312 ;;		___awmod
   313 ;;		_init_IOPin
   314 ;;		_init_USART
   315 ;;		_parseMessage
   316 ;;		_read_id_module
   317 ;; This function is called by:
   318 ;;		Startup code after reset
   319 ;; This function uses a non-reentrant model
   320 ;;
   321                           
   322                           	psect	text0
   323  000652                     __ptext0:
   324                           	opt stack 0
   325  000652                     _main:
   326                           	opt stack 27
   327                           
   328                           ;main.c: 217: OSCCONbits.IRCF = 0b111 ;
   329                           
   330                           ;incstack = 0
   331  000652  88D3               	bsf	4051,4,c	;volatile
   332  000654  8AD3               	bsf	4051,5,c	;volatile
   333  000656  8CD3               	bsf	4051,6,c	;volatile
   334                           
   335                           ;main.c: 218: OSCTUNEbits.PLLEN = 1 ;
   336  000658  8C9B               	bsf	3995,6,c	;volatile
   337                           
   338                           ;main.c: 219: init_USART();
   339  00065A  EC71  F005         	call	_init_USART	;wreg free
   340                           
   341                           ;main.c: 220: init_IOPin();
   342  00065E  EC4B  F005         	call	_init_IOPin	;wreg free
   343                           
   344                           ;main.c: 222: INTCONbits.PEIE = 1 ;
   345  000662  8CF2               	bsf	intcon,6,c	;volatile
   346                           
   347                           ;main.c: 223: INTCONbits.GIE = 1 ;
   348  000664  8EF2               	bsf	intcon,7,c	;volatile
   349  000666  D000               	goto	l1074
   350  000668                     l1074:
   351                           
   352                           ;main.c: 226: {
   353                           ;main.c: 227: if(iRx%10 == 5){
   354  000668  C037  F015         	movff	_iRx,___awmod@dividend
   355  00066C  C038  F016         	movff	_iRx+1,___awmod@dividend+1
   356  000670  0E00               	movlw	0
   357  000672  6E18               	movwf	___awmod@divisor+1,c
   358  000674  0E0A               	movlw	10
   359  000676  6E17               	movwf	___awmod@divisor,c
   360  000678  EC7F  F004         	call	___awmod	;wreg free
   361  00067C  0E05               	movlw	5
   362  00067E  1815               	xorwf	?___awmod,w,c
   363  000680  1016               	iorwf	?___awmod+1,w,c
   364  000682  A4D8               	btfss	status,2,c
   365  000684  D7F1               	goto	l1074
   366                           
   367                           ;main.c: 228: parseMessage();
   368  000686  EC34  F004         	call	_parseMessage	;wreg free
   369                           
   370                           ;main.c: 229: if(idModuleRead == (read_id_module()+48)){
   371  00068A  503C               	movf	_idModuleRead,w,c
   372  00068C  6E21               	movwf	??_main& (0+255),c
   373  00068E  6A22               	clrf	(??_main+1)& (0+255),c
   374  000690  EC27  F005         	call	_read_id_module	;wreg free
   375  000694  0E30               	movlw	48
   376  000696  2615               	addwf	?_read_id_module,f,c
   377  000698  0E00               	movlw	0
   378  00069A  2216               	addwfc	?_read_id_module+1,f,c
   379  00069C  5021               	movf	??_main,w,c
   380  00069E  1815               	xorwf	?_read_id_module,w,c
   381  0006A0  E1E3               	bnz	l1074
   382  0006A2  5022               	movf	??_main+1,w,c
   383  0006A4  1816               	xorwf	?_read_id_module+1,w,c
   384  0006A6  A4D8               	btfss	status,2,c
   385  0006A8  D7DF               	goto	l1074
   386                           
   387                           ;main.c: 230: if(idBrocheRead=='1'){
   388  0006AA  0E31               	movlw	49
   389  0006AC  183B               	xorwf	_idBrocheRead,w,c
   390  0006AE  A4D8               	btfss	status,2,c
   391  0006B0  D00E               	goto	l1088
   392                           
   393                           ;main.c: 231: UART_Write_Text("BROCHE 1\n");
   394  0006B2  0E01               	movlw	low STR_1
   395  0006B4  6E16               	movwf	UART_Write_Text@text,c
   396  0006B6  0E06               	movlw	high STR_1
   397  0006B8  6E17               	movwf	UART_Write_Text@text+1,c
   398  0006BA  EC01  F005         	call	_UART_Write_Text	;wreg free
   399                           
   400                           ;main.c: 232: if(valueBrocheRead == '1')
   401  0006BE  0E31               	movlw	49
   402  0006C0  183D               	xorwf	_valueBrocheRead,w,c
   403  0006C2  A4D8               	btfss	status,2,c
   404  0006C4  D002               	goto	l101
   405                           
   406                           ;main.c: 233: PORTBbits.RB1 = 0 ;
   407  0006C6  9281               	bcf	3969,1,c	;volatile
   408  0006C8  D002               	goto	l1088
   409  0006CA                     l101:
   410                           
   411                           ;main.c: 234: else
   412                           ;main.c: 235: PORTBbits.RB1 = 1 ;
   413  0006CA  8281               	bsf	3969,1,c	;volatile
   414  0006CC  D000               	goto	l1088
   415  0006CE                     l1088:
   416                           
   417                           ;main.c: 236: }
   418                           ;main.c: 237: if(idBrocheRead=='2'){
   419  0006CE  0E32               	movlw	50
   420  0006D0  183B               	xorwf	_idBrocheRead,w,c
   421  0006D2  A4D8               	btfss	status,2,c
   422  0006D4  D00E               	goto	l1096
   423                           
   424                           ;main.c: 238: UART_Write_Text("BROCHE 2\n");
   425  0006D6  0E0B               	movlw	low STR_2
   426  0006D8  6E16               	movwf	UART_Write_Text@text,c
   427  0006DA  0E06               	movlw	high STR_2
   428  0006DC  6E17               	movwf	UART_Write_Text@text+1,c
   429  0006DE  EC01  F005         	call	_UART_Write_Text	;wreg free
   430                           
   431                           ;main.c: 239: if(valueBrocheRead == '1')
   432  0006E2  0E31               	movlw	49
   433  0006E4  183D               	xorwf	_valueBrocheRead,w,c
   434  0006E6  A4D8               	btfss	status,2,c
   435  0006E8  D002               	goto	l104
   436                           
   437                           ;main.c: 240: PORTBbits.RB0 = 0 ;
   438  0006EA  9081               	bcf	3969,0,c	;volatile
   439  0006EC  D002               	goto	l1096
   440  0006EE                     l104:
   441                           
   442                           ;main.c: 241: else
   443                           ;main.c: 242: PORTBbits.RB0 = 1 ;
   444  0006EE  8081               	bsf	3969,0,c	;volatile
   445  0006F0  D000               	goto	l1096
   446  0006F2                     l1096:
   447                           
   448                           ;main.c: 243: }
   449                           ;main.c: 244: if(idBrocheRead=='3'){
   450  0006F2  0E33               	movlw	51
   451  0006F4  183B               	xorwf	_idBrocheRead,w,c
   452  0006F6  A4D8               	btfss	status,2,c
   453  0006F8  D00E               	goto	l1104
   454                           
   455                           ;main.c: 245: UART_Write_Text("BROCHE 3\n");
   456  0006FA  0E15               	movlw	low STR_3
   457  0006FC  6E16               	movwf	UART_Write_Text@text,c
   458  0006FE  0E06               	movlw	high STR_3
   459  000700  6E17               	movwf	UART_Write_Text@text+1,c
   460  000702  EC01  F005         	call	_UART_Write_Text	;wreg free
   461                           
   462                           ;main.c: 246: if(valueBrocheRead == '1')
   463  000706  0E31               	movlw	49
   464  000708  183D               	xorwf	_valueBrocheRead,w,c
   465  00070A  A4D8               	btfss	status,2,c
   466  00070C  D002               	goto	l107
   467                           
   468                           ;main.c: 247: PORTCbits.RC5 = 0 ;
   469  00070E  9A82               	bcf	3970,5,c	;volatile
   470  000710  D002               	goto	l1104
   471  000712                     l107:
   472                           
   473                           ;main.c: 248: else
   474                           ;main.c: 249: PORTCbits.RC5 = 1 ;
   475  000712  8A82               	bsf	3970,5,c	;volatile
   476  000714  D000               	goto	l1104
   477  000716                     l1104:
   478                           
   479                           ;main.c: 250: }
   480                           ;main.c: 251: if(idBrocheRead=='4'){
   481  000716  0E34               	movlw	52
   482  000718  183B               	xorwf	_idBrocheRead,w,c
   483  00071A  A4D8               	btfss	status,2,c
   484  00071C  D00E               	goto	l1112
   485                           
   486                           ;main.c: 252: UART_Write_Text("BROCHE 4\n");
   487  00071E  0E1F               	movlw	low STR_4
   488  000720  6E16               	movwf	UART_Write_Text@text,c
   489  000722  0E06               	movlw	high STR_4
   490  000724  6E17               	movwf	UART_Write_Text@text+1,c
   491  000726  EC01  F005         	call	_UART_Write_Text	;wreg free
   492                           
   493                           ;main.c: 253: if(valueBrocheRead == '1')
   494  00072A  0E31               	movlw	49
   495  00072C  183D               	xorwf	_valueBrocheRead,w,c
   496  00072E  A4D8               	btfss	status,2,c
   497  000730  D002               	goto	l110
   498                           
   499                           ;main.c: 254: PORTCbits.RC4 = 0 ;
   500  000732  9882               	bcf	3970,4,c	;volatile
   501  000734  D002               	goto	l1112
   502  000736                     l110:
   503                           
   504                           ;main.c: 255: else
   505                           ;main.c: 256: PORTCbits.RC4 = 1 ;
   506  000736  8882               	bsf	3970,4,c	;volatile
   507  000738  D000               	goto	l1112
   508  00073A                     l1112:
   509                           
   510                           ;main.c: 257: }
   511                           ;main.c: 258: if(idBrocheRead=='5'){
   512  00073A  0E35               	movlw	53
   513  00073C  183B               	xorwf	_idBrocheRead,w,c
   514  00073E  A4D8               	btfss	status,2,c
   515  000740  D00E               	goto	l1120
   516                           
   517                           ;main.c: 259: UART_Write_Text("BROCHE 5\n");
   518  000742  0E29               	movlw	low STR_5
   519  000744  6E16               	movwf	UART_Write_Text@text,c
   520  000746  0E06               	movlw	high STR_5
   521  000748  6E17               	movwf	UART_Write_Text@text+1,c
   522  00074A  EC01  F005         	call	_UART_Write_Text	;wreg free
   523                           
   524                           ;main.c: 260: if(valueBrocheRead == '1')
   525  00074E  0E31               	movlw	49
   526  000750  183D               	xorwf	_valueBrocheRead,w,c
   527  000752  A4D8               	btfss	status,2,c
   528  000754  D002               	goto	l113
   529                           
   530                           ;main.c: 261: PORTCbits.RC3 = 0 ;
   531  000756  9682               	bcf	3970,3,c	;volatile
   532  000758  D002               	goto	l1120
   533  00075A                     l113:
   534                           
   535                           ;main.c: 262: else
   536                           ;main.c: 263: PORTCbits.RC3 = 1 ;
   537  00075A  8682               	bsf	3970,3,c	;volatile
   538  00075C  D000               	goto	l1120
   539  00075E                     l1120:
   540                           
   541                           ;main.c: 264: }
   542                           ;main.c: 265: if(idBrocheRead=='6'){
   543  00075E  0E36               	movlw	54
   544  000760  183B               	xorwf	_idBrocheRead,w,c
   545  000762  A4D8               	btfss	status,2,c
   546  000764  D00E               	goto	l1128
   547                           
   548                           ;main.c: 266: UART_Write_Text("BROCHE 6\n");
   549  000766  0E33               	movlw	low STR_6
   550  000768  6E16               	movwf	UART_Write_Text@text,c
   551  00076A  0E06               	movlw	high STR_6
   552  00076C  6E17               	movwf	UART_Write_Text@text+1,c
   553  00076E  EC01  F005         	call	_UART_Write_Text	;wreg free
   554                           
   555                           ;main.c: 267: if(valueBrocheRead == '1')
   556  000772  0E31               	movlw	49
   557  000774  183D               	xorwf	_valueBrocheRead,w,c
   558  000776  A4D8               	btfss	status,2,c
   559  000778  D002               	goto	l116
   560                           
   561                           ;main.c: 268: PORTCbits.RC2 = 0 ;
   562  00077A  9482               	bcf	3970,2,c	;volatile
   563  00077C  D002               	goto	l1128
   564  00077E                     l116:
   565                           
   566                           ;main.c: 269: else
   567                           ;main.c: 270: PORTCbits.RC2 = 1 ;
   568  00077E  8482               	bsf	3970,2,c	;volatile
   569  000780  D000               	goto	l1128
   570  000782                     l1128:
   571                           
   572                           ;main.c: 271: }
   573                           ;main.c: 272: if(idBrocheRead=='7'){
   574  000782  0E37               	movlw	55
   575  000784  183B               	xorwf	_idBrocheRead,w,c
   576  000786  A4D8               	btfss	status,2,c
   577  000788  D00E               	goto	l1136
   578                           
   579                           ;main.c: 273: UART_Write_Text("BROCHE 7\n");
   580  00078A  0E3D               	movlw	low STR_7
   581  00078C  6E16               	movwf	UART_Write_Text@text,c
   582  00078E  0E06               	movlw	high STR_7
   583  000790  6E17               	movwf	UART_Write_Text@text+1,c
   584  000792  EC01  F005         	call	_UART_Write_Text	;wreg free
   585                           
   586                           ;main.c: 274: if(valueBrocheRead == '1')
   587  000796  0E31               	movlw	49
   588  000798  183D               	xorwf	_valueBrocheRead,w,c
   589  00079A  A4D8               	btfss	status,2,c
   590  00079C  D002               	goto	l119
   591                           
   592                           ;main.c: 275: PORTCbits.RC1 = 0 ;
   593  00079E  9282               	bcf	3970,1,c	;volatile
   594  0007A0  D002               	goto	l1136
   595  0007A2                     l119:
   596                           
   597                           ;main.c: 276: else
   598                           ;main.c: 277: PORTCbits.RC1 = 1 ;
   599  0007A2  8282               	bsf	3970,1,c	;volatile
   600  0007A4  D000               	goto	l1136
   601  0007A6                     l1136:
   602                           
   603                           ;main.c: 278: }
   604                           ;main.c: 279: if(idBrocheRead=='8'){
   605  0007A6  0E38               	movlw	56
   606  0007A8  183B               	xorwf	_idBrocheRead,w,c
   607  0007AA  A4D8               	btfss	status,2,c
   608  0007AC  D75D               	goto	l1074
   609                           
   610                           ;main.c: 280: UART_Write_Text("BROCHE 8\n");
   611  0007AE  0E47               	movlw	low STR_8
   612  0007B0  6E16               	movwf	UART_Write_Text@text,c
   613  0007B2  0E06               	movlw	high STR_8
   614  0007B4  6E17               	movwf	UART_Write_Text@text+1,c
   615  0007B6  EC01  F005         	call	_UART_Write_Text	;wreg free
   616                           
   617                           ;main.c: 281: if(valueBrocheRead == '1')
   618  0007BA  0E31               	movlw	49
   619  0007BC  183D               	xorwf	_valueBrocheRead,w,c
   620  0007BE  A4D8               	btfss	status,2,c
   621  0007C0  D002               	goto	l122
   622                           
   623                           ;main.c: 282: PORTCbits.RC0 = 0 ;
   624  0007C2  9082               	bcf	3970,0,c	;volatile
   625  0007C4  D751               	goto	l1074
   626  0007C6                     l122:
   627                           
   628                           ;main.c: 283: else
   629                           ;main.c: 284: PORTCbits.RC0 = 1 ;
   630  0007C6  8082               	bsf	3970,0,c	;volatile
   631  0007C8  D74F               	goto	l1074
   632                           
   633                           ;main.c: 285: }
   634                           ;main.c: 286: }
   635                           ;main.c: 287: }
   636                           ;main.c: 288: }
   637                           ;main.c: 290: return 0;
   638                           ;	Return value of _main is never used
   639  0007CA  EF0C  F000         	goto	start
   640  0007CE                     __end_of_main:
   641                           	opt stack 0
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           intcon	equ	0xFF2
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           status	equ	0xFD8
   648                           
   649 ;; *************** function _read_id_module *****************
   650 ;; Defined at:
   651 ;;		line 181 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;  id              2   22[COMRAM] int 
   656 ;; Return value:  Size  Location     Type
   657 ;;                  2   20[COMRAM] int 
   658 ;; Registers used:
   659 ;;		wreg, status,2, status,0
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   665 ;;      Params:         2       0       0       0       0       0       0
   666 ;;      Locals:         2       0       0       0       0       0       0
   667 ;;      Temps:          0       0       0       0       0       0       0
   668 ;;      Totals:         4       0       0       0       0       0       0
   669 ;;Total ram usage:        4 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    2
   672 ;; This function calls:
   673 ;;		Nothing
   674 ;; This function is called by:
   675 ;;		_main
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text1
   680  000A4E                     __ptext1:
   681                           	opt stack 0
   682  000A4E                     _read_id_module:
   683                           	opt stack 28
   684                           
   685                           ;main.c: 182: int id = 0;
   686                           
   687                           ;incstack = 0
   688  000A4E  0E00               	movlw	0
   689  000A50  6E18               	movwf	read_id_module@id+1,c
   690  000A52  0E00               	movlw	0
   691  000A54  6E17               	movwf	read_id_module@id,c
   692                           
   693                           ;main.c: 183: if(!PORTAbits.RA0){
   694  000A56  B080               	btfsc	3968,0,c	;volatile
   695  000A58  D003               	goto	l998
   696                           
   697                           ;main.c: 184: id += 1 ;
   698  000A5A  4A17               	infsnz	read_id_module@id,f,c
   699  000A5C  2A18               	incf	read_id_module@id+1,f,c
   700  000A5E  D000               	goto	l998
   701  000A60                     l998:
   702                           
   703                           ;main.c: 185: }
   704                           ;main.c: 186: if(!PORTAbits.RA2){
   705  000A60  B480               	btfsc	3968,2,c	;volatile
   706  000A62  D005               	goto	l1002
   707                           
   708                           ;main.c: 187: id += 2 ;
   709  000A64  0E02               	movlw	2
   710  000A66  2617               	addwf	read_id_module@id,f,c
   711  000A68  0E00               	movlw	0
   712  000A6A  2218               	addwfc	read_id_module@id+1,f,c
   713  000A6C  D000               	goto	l1002
   714  000A6E                     l1002:
   715                           
   716                           ;main.c: 188: }
   717                           ;main.c: 189: if(!PORTAbits.RA1){
   718  000A6E  B280               	btfsc	3968,1,c	;volatile
   719  000A70  D005               	goto	l1006
   720                           
   721                           ;main.c: 190: id += 4 ;
   722  000A72  0E04               	movlw	4
   723  000A74  2617               	addwf	read_id_module@id,f,c
   724  000A76  0E00               	movlw	0
   725  000A78  2218               	addwfc	read_id_module@id+1,f,c
   726  000A7A  D000               	goto	l1006
   727  000A7C                     l1006:
   728                           
   729                           ;main.c: 191: }
   730                           ;main.c: 192: if(!PORTAbits.RA3){
   731  000A7C  B680               	btfsc	3968,3,c	;volatile
   732  000A7E  D005               	goto	l1010
   733                           
   734                           ;main.c: 193: id += 8 ;
   735  000A80  0E08               	movlw	8
   736  000A82  2617               	addwf	read_id_module@id,f,c
   737  000A84  0E00               	movlw	0
   738  000A86  2218               	addwfc	read_id_module@id+1,f,c
   739  000A88  D000               	goto	l1010
   740  000A8A                     l1010:
   741                           
   742                           ;main.c: 194: }
   743                           ;main.c: 195: return id ;
   744  000A8A  C017  F015         	movff	read_id_module@id,?_read_id_module
   745  000A8E  C018  F016         	movff	read_id_module@id+1,?_read_id_module+1
   746  000A92  D000               	goto	l91
   747  000A94                     l91:
   748  000A94  0012               	return		;funcret
   749  000A96                     __end_of_read_id_module:
   750                           	opt stack 0
   751                           tblptru	equ	0xFF8
   752                           tblptrh	equ	0xFF7
   753                           intcon	equ	0xFF2
   754                           postinc0	equ	0xFEE
   755                           wreg	equ	0xFE8
   756                           status	equ	0xFD8
   757                           
   758 ;; *************** function _parseMessage *****************
   759 ;; Defined at:
   760 ;;		line 198 in file "main.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;		None               void
   767 ;; Registers used:
   768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   774 ;;      Params:         0       0       0       0       0       0       0
   775 ;;      Locals:         0       0       0       0       0       0       0
   776 ;;      Temps:          0       0       0       0       0       0       0
   777 ;;      Totals:         0       0       0       0       0       0       0
   778 ;;Total ram usage:        0 bytes
   779 ;; Hardware stack levels used:    1
   780 ;; Hardware stack levels required when called:    3
   781 ;; This function calls:
   782 ;;		___awmod
   783 ;; This function is called by:
   784 ;;		_main
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           	psect	text2
   789  000868                     __ptext2:
   790                           	opt stack 0
   791  000868                     _parseMessage:
   792                           	opt stack 27
   793                           
   794                           ;main.c: 199: idModuleRead = RxBuffer[iRxLecture%10];
   795                           
   796                           ;incstack = 0
   797  000868  C039  F015         	movff	_iRxLecture,___awmod@dividend
   798  00086C  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   799  000870  0E00               	movlw	0
   800  000872  6E18               	movwf	___awmod@divisor+1,c
   801  000874  0E0A               	movlw	10
   802  000876  6E17               	movwf	___awmod@divisor,c
   803  000878  EC7F  F004         	call	___awmod	;wreg free
   804  00087C  0E23               	movlw	low _RxBuffer
   805  00087E  2415               	addwf	?___awmod,w,c
   806  000880  6ED9               	movwf	fsr2l,c
   807  000882  0E00               	movlw	high _RxBuffer
   808  000884  2016               	addwfc	?___awmod+1,w,c
   809  000886  6EDA               	movwf	fsr2h,c
   810  000888  50DF               	movf	indf2,w,c
   811  00088A  6E3C               	movwf	_idModuleRead,c
   812                           
   813                           ;main.c: 200: iRxLecture += 2 ;
   814  00088C  0E02               	movlw	2
   815  00088E  2639               	addwf	_iRxLecture,f,c
   816  000890  0E00               	movlw	0
   817  000892  223A               	addwfc	_iRxLecture+1,f,c
   818                           
   819                           ;main.c: 201: idBrocheRead = RxBuffer[iRxLecture%10];
   820  000894  C039  F015         	movff	_iRxLecture,___awmod@dividend
   821  000898  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   822  00089C  0E00               	movlw	0
   823  00089E  6E18               	movwf	___awmod@divisor+1,c
   824  0008A0  0E0A               	movlw	10
   825  0008A2  6E17               	movwf	___awmod@divisor,c
   826  0008A4  EC7F  F004         	call	___awmod	;wreg free
   827  0008A8  0E23               	movlw	low _RxBuffer
   828  0008AA  2415               	addwf	?___awmod,w,c
   829  0008AC  6ED9               	movwf	fsr2l,c
   830  0008AE  0E00               	movlw	high _RxBuffer
   831  0008B0  2016               	addwfc	?___awmod+1,w,c
   832  0008B2  6EDA               	movwf	fsr2h,c
   833  0008B4  50DF               	movf	indf2,w,c
   834  0008B6  6E3B               	movwf	_idBrocheRead,c
   835                           
   836                           ;main.c: 202: iRxLecture += 2 ;
   837  0008B8  0E02               	movlw	2
   838  0008BA  2639               	addwf	_iRxLecture,f,c
   839  0008BC  0E00               	movlw	0
   840  0008BE  223A               	addwfc	_iRxLecture+1,f,c
   841                           
   842                           ;main.c: 203: valueBrocheRead = RxBuffer[iRxLecture%10];
   843  0008C0  C039  F015         	movff	_iRxLecture,___awmod@dividend
   844  0008C4  C03A  F016         	movff	_iRxLecture+1,___awmod@dividend+1
   845  0008C8  0E00               	movlw	0
   846  0008CA  6E18               	movwf	___awmod@divisor+1,c
   847  0008CC  0E0A               	movlw	10
   848  0008CE  6E17               	movwf	___awmod@divisor,c
   849  0008D0  EC7F  F004         	call	___awmod	;wreg free
   850  0008D4  0E23               	movlw	low _RxBuffer
   851  0008D6  2415               	addwf	?___awmod,w,c
   852  0008D8  6ED9               	movwf	fsr2l,c
   853  0008DA  0E00               	movlw	high _RxBuffer
   854  0008DC  2016               	addwfc	?___awmod+1,w,c
   855  0008DE  6EDA               	movwf	fsr2h,c
   856  0008E0  50DF               	movf	indf2,w,c
   857  0008E2  6E3D               	movwf	_valueBrocheRead,c
   858                           
   859                           ;main.c: 204: iRxLecture += 2 ;
   860  0008E4  0E02               	movlw	2
   861  0008E6  2639               	addwf	_iRxLecture,f,c
   862  0008E8  0E00               	movlw	0
   863  0008EA  223A               	addwfc	_iRxLecture+1,f,c
   864                           
   865                           ;main.c: 205: iRx = 0 ;
   866  0008EC  0E00               	movlw	0
   867  0008EE  6E38               	movwf	_iRx+1,c
   868  0008F0  0E00               	movlw	0
   869  0008F2  6E37               	movwf	_iRx,c
   870                           
   871                           ;main.c: 206: iRxLecture = 0 ;
   872  0008F4  0E00               	movlw	0
   873  0008F6  6E3A               	movwf	_iRxLecture+1,c
   874  0008F8  0E00               	movlw	0
   875  0008FA  6E39               	movwf	_iRxLecture,c
   876  0008FC  0012               	return		;funcret
   877  0008FE                     __end_of_parseMessage:
   878                           	opt stack 0
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           intcon	equ	0xFF2
   882                           postinc0	equ	0xFEE
   883                           wreg	equ	0xFE8
   884                           indf2	equ	0xFDF
   885                           fsr2h	equ	0xFDA
   886                           fsr2l	equ	0xFD9
   887                           status	equ	0xFD8
   888                           
   889 ;; *************** function ___awmod *****************
   890 ;; Defined at:
   891 ;;		line 8 in file "/Applications/microchip/xc8/v1.34/sources/common/awmod.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  dividend        2   20[COMRAM] int 
   894 ;;  divisor         2   22[COMRAM] int 
   895 ;; Auto vars:     Size  Location     Type
   896 ;;  sign            1   25[COMRAM] unsigned char 
   897 ;;  counter         1   24[COMRAM] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  2   20[COMRAM] int 
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   907 ;;      Params:         4       0       0       0       0       0       0
   908 ;;      Locals:         2       0       0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0       0       0
   910 ;;      Totals:         6       0       0       0       0       0       0
   911 ;;Total ram usage:        6 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    2
   914 ;; This function calls:
   915 ;;		Nothing
   916 ;; This function is called by:
   917 ;;		_parseMessage
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text3
   923  0008FE                     __ptext3:
   924                           	opt stack 0
   925  0008FE                     ___awmod:
   926                           	opt stack 27
   927                           
   928                           ;incstack = 0
   929  0008FE  0E00               	movlw	0
   930  000900  6E1A               	movwf	___awmod@sign,c
   931  000902  AE16               	btfss	___awmod@dividend+1,7,c
   932  000904  D007               	goto	l956
   933  000906  6C15               	negf	___awmod@dividend,c
   934  000908  1E16               	comf	___awmod@dividend+1,f,c
   935  00090A  B0D8               	btfsc	status,0,c
   936  00090C  2A16               	incf	___awmod@dividend+1,f,c
   937  00090E  0E01               	movlw	1
   938  000910  6E1A               	movwf	___awmod@sign,c
   939  000912  D000               	goto	l956
   940  000914                     l956:
   941  000914  AE18               	btfss	___awmod@divisor+1,7,c
   942  000916  D005               	goto	l960
   943  000918  6C17               	negf	___awmod@divisor,c
   944  00091A  1E18               	comf	___awmod@divisor+1,f,c
   945  00091C  B0D8               	btfsc	status,0,c
   946  00091E  2A18               	incf	___awmod@divisor+1,f,c
   947  000920  D000               	goto	l960
   948  000922                     l960:
   949  000922  5017               	movf	___awmod@divisor,w,c
   950  000924  1018               	iorwf	___awmod@divisor+1,w,c
   951  000926  B4D8               	btfsc	status,2,c
   952  000928  D01D               	goto	l976
   953  00092A  0E01               	movlw	1
   954  00092C  6E19               	movwf	___awmod@counter,c
   955  00092E  D005               	goto	l966
   956  000930                     l964:
   957  000930  90D8               	bcf	status,0,c
   958  000932  3617               	rlcf	___awmod@divisor,f,c
   959  000934  3618               	rlcf	___awmod@divisor+1,f,c
   960  000936  2A19               	incf	___awmod@counter,f,c
   961  000938  D000               	goto	l966
   962  00093A                     l966:
   963  00093A  BE18               	btfsc	___awmod@divisor+1,7,c
   964  00093C  D002               	goto	l968
   965  00093E  D7F8               	goto	l964
   966  000940  D000               	goto	l968
   967  000942                     l968:
   968  000942  5017               	movf	___awmod@divisor,w,c
   969  000944  5C15               	subwf	___awmod@dividend,w,c
   970  000946  5018               	movf	___awmod@divisor+1,w,c
   971  000948  5816               	subwfb	___awmod@dividend+1,w,c
   972  00094A  A0D8               	btfss	status,0,c
   973  00094C  D005               	goto	l972
   974  00094E  5017               	movf	___awmod@divisor,w,c
   975  000950  5E15               	subwf	___awmod@dividend,f,c
   976  000952  5018               	movf	___awmod@divisor+1,w,c
   977  000954  5A16               	subwfb	___awmod@dividend+1,f,c
   978  000956  D000               	goto	l972
   979  000958                     l972:
   980  000958  90D8               	bcf	status,0,c
   981  00095A  3218               	rrcf	___awmod@divisor+1,f,c
   982  00095C  3217               	rrcf	___awmod@divisor,f,c
   983  00095E  2E19               	decfsz	___awmod@counter,f,c
   984  000960  D7F0               	goto	l968
   985  000962  D000               	goto	l976
   986  000964                     l976:
   987  000964  501A               	movf	___awmod@sign,w,c
   988  000966  B4D8               	btfsc	status,2,c
   989  000968  D005               	goto	l980
   990  00096A  6C15               	negf	___awmod@dividend,c
   991  00096C  1E16               	comf	___awmod@dividend+1,f,c
   992  00096E  B0D8               	btfsc	status,0,c
   993  000970  2A16               	incf	___awmod@dividend+1,f,c
   994  000972  D000               	goto	l980
   995  000974                     l980:
   996  000974  C015  F015         	movff	___awmod@dividend,?___awmod
   997  000978  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
   998  00097C  D000               	goto	l339
   999  00097E                     l339:
  1000  00097E  0012               	return		;funcret
  1001  000980                     __end_of___awmod:
  1002                           	opt stack 0
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           intcon	equ	0xFF2
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           indf2	equ	0xFDF
  1009                           fsr2h	equ	0xFDA
  1010                           fsr2l	equ	0xFD9
  1011                           status	equ	0xFD8
  1012                           
  1013 ;; *************** function _init_USART *****************
  1014 ;; Defined at:
  1015 ;;		line 116 in file "main.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;		None               void
  1022 ;; Registers used:
  1023 ;;		wreg, status,2
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1029 ;;      Params:         0       0       0       0       0       0       0
  1030 ;;      Locals:         0       0       0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0
  1032 ;;      Totals:         0       0       0       0       0       0       0
  1033 ;;Total ram usage:        0 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; Hardware stack levels required when called:    2
  1036 ;; This function calls:
  1037 ;;		Nothing
  1038 ;; This function is called by:
  1039 ;;		_main
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text4
  1044  000AE2                     __ptext4:
  1045                           	opt stack 0
  1046  000AE2                     _init_USART:
  1047                           	opt stack 28
  1048                           
  1049                           ;main.c: 117: TXSTAbits.TXEN = 1 ;
  1050                           
  1051                           ;incstack = 0
  1052  000AE2  8AAC               	bsf	4012,5,c	;volatile
  1053                           
  1054                           ;main.c: 118: TXSTAbits.BRGH = 1 ;
  1055  000AE4  84AC               	bsf	4012,2,c	;volatile
  1056                           
  1057                           ;main.c: 119: RCSTAbits.CREN = 1 ;
  1058  000AE6  88AB               	bsf	4011,4,c	;volatile
  1059                           
  1060                           ;main.c: 123: TRISCbits.RC7 = 1 ;
  1061  000AE8  8E94               	bsf	3988,7,c	;volatile
  1062                           
  1063                           ;main.c: 124: TRISCbits.RC6 = 0 ;
  1064  000AEA  9C94               	bcf	3988,6,c	;volatile
  1065                           
  1066                           ;main.c: 126: SPBRG = 51 ;
  1067  000AEC  0E33               	movlw	51
  1068  000AEE  6EAF               	movwf	4015,c	;volatile
  1069                           
  1070                           ;main.c: 128: PIE1bits.RCIE = 1 ;
  1071  000AF0  8A9D               	bsf	3997,5,c	;volatile
  1072                           
  1073                           ;main.c: 129: RCSTAbits.SPEN = 1 ;
  1074  000AF2  8EAB               	bsf	4011,7,c	;volatile
  1075  000AF4  0012               	return		;funcret
  1076  000AF6                     __end_of_init_USART:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           intcon	equ	0xFF2
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           indf2	equ	0xFDF
  1084                           fsr2h	equ	0xFDA
  1085                           fsr2l	equ	0xFD9
  1086                           status	equ	0xFD8
  1087                           
  1088 ;; *************** function _init_IOPin *****************
  1089 ;; Defined at:
  1090 ;;		line 132 in file "main.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;		None
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;		None
  1095 ;; Return value:  Size  Location     Type
  1096 ;;		None               void
  1097 ;; Registers used:
  1098 ;;		None
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1104 ;;      Params:         0       0       0       0       0       0       0
  1105 ;;      Locals:         0       0       0       0       0       0       0
  1106 ;;      Temps:          0       0       0       0       0       0       0
  1107 ;;      Totals:         0       0       0       0       0       0       0
  1108 ;;Total ram usage:        0 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    2
  1111 ;; This function calls:
  1112 ;;		Nothing
  1113 ;; This function is called by:
  1114 ;;		_main
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	text5
  1119  000A96                     __ptext5:
  1120                           	opt stack 0
  1121  000A96                     _init_IOPin:
  1122                           	opt stack 28
  1123                           
  1124                           ;main.c: 135: ADCON1bits.PCFG = 0b1111 ;
  1125                           
  1126                           ;incstack = 0
  1127  000A96  80C1               	bsf	4033,0,c	;volatile
  1128  000A98  82C1               	bsf	4033,1,c	;volatile
  1129  000A9A  84C1               	bsf	4033,2,c	;volatile
  1130  000A9C  86C1               	bsf	4033,3,c	;volatile
  1131                           
  1132                           ;main.c: 136: TRISAbits.TRISA0 = 1 ;
  1133  000A9E  8092               	bsf	3986,0,c	;volatile
  1134                           
  1135                           ;main.c: 137: TRISAbits.TRISA1 = 1 ;
  1136  000AA0  8292               	bsf	3986,1,c	;volatile
  1137                           
  1138                           ;main.c: 138: TRISAbits.TRISA2 = 1 ;
  1139  000AA2  8492               	bsf	3986,2,c	;volatile
  1140                           
  1141                           ;main.c: 139: TRISAbits.TRISA3 = 1 ;
  1142  000AA4  8692               	bsf	3986,3,c	;volatile
  1143                           
  1144                           ;main.c: 142: TRISCbits.TRISC0 = 0 ;
  1145  000AA6  9094               	bcf	3988,0,c	;volatile
  1146                           
  1147                           ;main.c: 143: TRISCbits.TRISC1 = 0 ;
  1148  000AA8  9294               	bcf	3988,1,c	;volatile
  1149                           
  1150                           ;main.c: 144: TRISCbits.TRISC2 = 0 ;
  1151  000AAA  9494               	bcf	3988,2,c	;volatile
  1152                           
  1153                           ;main.c: 145: TRISCbits.TRISC3 = 0 ;
  1154  000AAC  9694               	bcf	3988,3,c	;volatile
  1155                           
  1156                           ;main.c: 146: TRISCbits.TRISC4 = 0 ;
  1157  000AAE  9894               	bcf	3988,4,c	;volatile
  1158                           
  1159                           ;main.c: 147: TRISCbits.TRISC5 = 0 ;
  1160  000AB0  9A94               	bcf	3988,5,c	;volatile
  1161                           
  1162                           ;main.c: 149: TRISBbits.TRISB0 = 0 ;
  1163  000AB2  9093               	bcf	3987,0,c	;volatile
  1164                           
  1165                           ;main.c: 150: TRISBbits.TRISB1 = 0 ;
  1166  000AB4  9293               	bcf	3987,1,c	;volatile
  1167                           
  1168                           ;main.c: 152: PORTBbits.RB1 = 1 ;
  1169  000AB6  8281               	bsf	3969,1,c	;volatile
  1170                           
  1171                           ;main.c: 153: PORTBbits.RB0 = 1 ;
  1172  000AB8  8081               	bsf	3969,0,c	;volatile
  1173                           
  1174                           ;main.c: 154: PORTCbits.RC5 = 1 ;
  1175  000ABA  8A82               	bsf	3970,5,c	;volatile
  1176                           
  1177                           ;main.c: 155: PORTCbits.RC4 = 1 ;
  1178  000ABC  8882               	bsf	3970,4,c	;volatile
  1179                           
  1180                           ;main.c: 156: PORTCbits.RC3 = 1 ;
  1181  000ABE  8682               	bsf	3970,3,c	;volatile
  1182                           
  1183                           ;main.c: 157: PORTCbits.RC2 = 1 ;
  1184  000AC0  8482               	bsf	3970,2,c	;volatile
  1185                           
  1186                           ;main.c: 158: PORTCbits.RC1 = 1 ;
  1187  000AC2  8282               	bsf	3970,1,c	;volatile
  1188                           
  1189                           ;main.c: 159: PORTCbits.RC0 = 1 ;
  1190  000AC4  8082               	bsf	3970,0,c	;volatile
  1191  000AC6  0012               	return		;funcret
  1192  000AC8                     __end_of_init_IOPin:
  1193                           	opt stack 0
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           intcon	equ	0xFF2
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           indf2	equ	0xFDF
  1200                           fsr2h	equ	0xFDA
  1201                           fsr2l	equ	0xFD9
  1202                           status	equ	0xFD8
  1203                           
  1204 ;; *************** function _UART_Write_Text *****************
  1205 ;; Defined at:
  1206 ;;		line 174 in file "main.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  text            2   21[COMRAM] PTR unsigned char 
  1209 ;;		 -> STR_8(10), STR_7(10), STR_6(10), STR_5(10), 
  1210 ;;		 -> STR_4(10), STR_3(10), STR_2(10), STR_1(10), 
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;  i               2   25[COMRAM] int 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;		None               void
  1215 ;; Registers used:
  1216 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1222 ;;      Params:         2       0       0       0       0       0       0
  1223 ;;      Locals:         2       0       0       0       0       0       0
  1224 ;;      Temps:          2       0       0       0       0       0       0
  1225 ;;      Totals:         6       0       0       0       0       0       0
  1226 ;;Total ram usage:        6 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    3
  1229 ;; This function calls:
  1230 ;;		_UART_Write
  1231 ;; This function is called by:
  1232 ;;		_main
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text6
  1237  000A02                     __ptext6:
  1238                           	opt stack 0
  1239  000A02                     _UART_Write_Text:
  1240                           	opt stack 27
  1241                           
  1242                           ;main.c: 176: int i;
  1243                           ;main.c: 177: for(i=0;text[i]!='\0';i++)
  1244                           
  1245                           ;incstack = 0
  1246  000A02  0E00               	movlw	0
  1247  000A04  6E1B               	movwf	UART_Write_Text@i+1,c
  1248  000A06  0E00               	movlw	0
  1249  000A08  6E1A               	movwf	UART_Write_Text@i,c
  1250  000A0A  D011               	goto	l990
  1251  000A0C                     l986:
  1252                           
  1253                           ;main.c: 178: UART_Write(text[i]);
  1254  000A0C  501A               	movf	UART_Write_Text@i,w,c
  1255  000A0E  2416               	addwf	UART_Write_Text@text,w,c
  1256  000A10  6E18               	movwf	??_UART_Write_Text& (0+255),c
  1257  000A12  501B               	movf	UART_Write_Text@i+1,w,c
  1258  000A14  2017               	addwfc	UART_Write_Text@text+1,w,c
  1259  000A16  6E19               	movwf	(??_UART_Write_Text+1)& (0+255),c
  1260  000A18  C018  FFF6         	movff	??_UART_Write_Text,tblptrl
  1261  000A1C  C019  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1262  000A20                     	if	0	;tblptru may be non-zero
  1263  000A20                     	endif
  1264  000A20                     	if	0	;tblptru may be non-zero
  1265  000A20                     	endif
  1266  000A20  0008               	tblrd		*
  1267  000A22  50F5               	movf	tablat,w,c
  1268  000A24  EC7B  F005         	call	_UART_Write
  1269  000A28  4A1A               	infsnz	UART_Write_Text@i,f,c
  1270  000A2A  2A1B               	incf	UART_Write_Text@i+1,f,c
  1271  000A2C  D000               	goto	l990
  1272  000A2E                     l990:
  1273  000A2E  501A               	movf	UART_Write_Text@i,w,c
  1274  000A30  2416               	addwf	UART_Write_Text@text,w,c
  1275  000A32  6E18               	movwf	??_UART_Write_Text& (0+255),c
  1276  000A34  501B               	movf	UART_Write_Text@i+1,w,c
  1277  000A36  2017               	addwfc	UART_Write_Text@text+1,w,c
  1278  000A38  6E19               	movwf	(??_UART_Write_Text+1)& (0+255),c
  1279  000A3A  C018  FFF6         	movff	??_UART_Write_Text,tblptrl
  1280  000A3E  C019  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1281  000A42                     	if	0	;tblptru may be non-zero
  1282  000A42                     	endif
  1283  000A42                     	if	0	;tblptru may be non-zero
  1284  000A42                     	endif
  1285  000A42  0008               	tblrd		*
  1286  000A44  50F5               	movf	tablat,w,c
  1287  000A46  0900               	iorlw	0
  1288  000A48  A4D8               	btfss	status,2,c
  1289  000A4A  D7E0               	goto	l986
  1290  000A4C  0012               	return		;funcret
  1291  000A4E                     __end_of_UART_Write_Text:
  1292                           	opt stack 0
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           intcon	equ	0xFF2
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           indf2	equ	0xFDF
  1301                           fsr2h	equ	0xFDA
  1302                           fsr2l	equ	0xFD9
  1303                           status	equ	0xFD8
  1304                           
  1305 ;; *************** function _UART_Write *****************
  1306 ;; Defined at:
  1307 ;;		line 168 in file "main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  data            1    wreg     unsigned char 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  data            1   20[COMRAM] unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;		None               void
  1314 ;; Registers used:
  1315 ;;		wreg
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1321 ;;      Params:         0       0       0       0       0       0       0
  1322 ;;      Locals:         1       0       0       0       0       0       0
  1323 ;;      Temps:          0       0       0       0       0       0       0
  1324 ;;      Totals:         1       0       0       0       0       0       0
  1325 ;;Total ram usage:        1 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    2
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		_UART_Write_Text
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text7
  1336  000AF6                     __ptext7:
  1337                           	opt stack 0
  1338  000AF6                     _UART_Write:
  1339                           	opt stack 27
  1340                           
  1341                           ;incstack = 0
  1342                           ;UART_Write@data stored from wreg
  1343  000AF6  6E15               	movwf	UART_Write@data,c
  1344                           
  1345                           ;main.c: 170: while(!TRMT);
  1346  000AF8  D000               	goto	l75
  1347  000AFA                     l75:
  1348  000AFA  A2AC               	btfss	4012,1,c	;volatile
  1349  000AFC  D7FE               	goto	l75
  1350                           
  1351                           ;main.c: 171: TXREG = data;
  1352  000AFE  C015  FFAD         	movff	UART_Write@data,4013	;volatile
  1353  000B02  0012               	return		;funcret
  1354  000B04                     __end_of_UART_Write:
  1355                           	opt stack 0
  1356                           tblptru	equ	0xFF8
  1357                           tblptrh	equ	0xFF7
  1358                           tblptrl	equ	0xFF6
  1359                           tablat	equ	0xFF5
  1360                           intcon	equ	0xFF2
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           indf2	equ	0xFDF
  1364                           fsr2h	equ	0xFDA
  1365                           fsr2l	equ	0xFD9
  1366                           status	equ	0xFD8
  1367                           
  1368 ;; *************** function _ISR *****************
  1369 ;; Defined at:
  1370 ;;		line 293 in file "main.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;		None               void
  1377 ;; Registers used:
  1378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1384 ;;      Params:         0       0       0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0       0       0
  1386 ;;      Temps:         14       0       0       0       0       0       0
  1387 ;;      Totals:        14       0       0       0       0       0       0
  1388 ;;Total ram usage:       14 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    1
  1391 ;; This function calls:
  1392 ;;		_UART_Read
  1393 ;;		i2___awmod
  1394 ;; This function is called by:
  1395 ;;		Interrupt level 2
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	intcode
  1400  000008                     __pintcode:
  1401                           	opt stack 0
  1402  000008                     _ISR:
  1403                           	opt stack 27
  1404                           
  1405                           ;incstack = 0
  1406  000008  CFFA F007          	movff	pclath,??_ISR
  1407  00000C  CFFB F008          	movff	pclatu,??_ISR+1
  1408  000010  CFE9 F009          	movff	fsr0l,??_ISR+2
  1409  000014  EDE7  F003         	call	int_func,f	;refresh shadow registers
  1410                           pclatu	equ	0xFFB
  1411                           pclath	equ	0xFFA
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           intcon	equ	0xFF2
  1417                           postinc0	equ	0xFEE
  1418                           fsr0l	equ	0xFE9
  1419                           wreg	equ	0xFE8
  1420                           indf2	equ	0xFDF
  1421                           fsr2h	equ	0xFDA
  1422                           fsr2l	equ	0xFD9
  1423                           status	equ	0xFD8
  1424                           
  1425                           	psect	intcode_body
  1426  0007CE                     __pintcode_body:
  1427                           	opt stack 27
  1428  0007CE                     int_func:
  1429                           	opt stack 27
  1430  0007CE  0006               	pop		; remove dummy address from shadow register refresh
  1431  0007D0  CFEA F00A          	movff	fsr0h,??_ISR+3
  1432  0007D4  CFE1 F00B          	movff	fsr1l,??_ISR+4
  1433  0007D8  CFE2 F00C          	movff	fsr1h,??_ISR+5
  1434  0007DC  CFD9 F00D          	movff	fsr2l,??_ISR+6
  1435  0007E0  CFDA F00E          	movff	fsr2h,??_ISR+7
  1436  0007E4  CFF3 F00F          	movff	prodl,??_ISR+8
  1437  0007E8  CFF4 F010          	movff	prodh,??_ISR+9
  1438  0007EC  CFF6 F011          	movff	tblptrl,??_ISR+10
  1439  0007F0  CFF7 F012          	movff	tblptrh,??_ISR+11
  1440  0007F4  CFF8 F013          	movff	tblptru,??_ISR+12
  1441  0007F8  CFF5 F014          	movff	tablat,??_ISR+13
  1442                           
  1443                           ;main.c: 295: if(PIR1bits.RCIF)
  1444  0007FC  AA9E               	btfss	3998,5,c	;volatile
  1445  0007FE  D017               	goto	i2l130
  1446                           
  1447                           ;main.c: 296: {
  1448                           ;main.c: 297: RxBuffer[iRx%10] = UART_Read() ;
  1449  000800  C037  F001         	movff	_iRx,i2___awmod@dividend
  1450  000804  C038  F002         	movff	_iRx+1,i2___awmod@dividend+1
  1451  000808  0E00               	movlw	0
  1452  00080A  6E04               	movwf	i2___awmod@divisor+1,c
  1453  00080C  0E0A               	movlw	10
  1454  00080E  6E03               	movwf	i2___awmod@divisor,c
  1455  000810  ECC0  F004         	call	i2___awmod	;wreg free
  1456  000814  0E23               	movlw	low _RxBuffer
  1457  000816  2401               	addwf	?i2___awmod,w,c
  1458  000818  6ED9               	movwf	fsr2l,c
  1459  00081A  0E00               	movlw	high _RxBuffer
  1460  00081C  2002               	addwfc	?i2___awmod+1,w,c
  1461  00081E  6EDA               	movwf	fsr2h,c
  1462  000820  EC82  F005         	call	_UART_Read	;wreg free
  1463  000824  6EDF               	movwf	indf2,c
  1464                           
  1465                           ;main.c: 298: iRx++ ;
  1466  000826  4A37               	infsnz	_iRx,f,c
  1467  000828  2A38               	incf	_iRx+1,f,c
  1468                           
  1469                           ;main.c: 299: PIR1bits.RCIF = 0;
  1470  00082A  9A9E               	bcf	3998,5,c	;volatile
  1471  00082C  D000               	goto	i2l130
  1472  00082E                     i2l130:
  1473  00082E  C014  FFF5         	movff	??_ISR+13,tablat
  1474  000832  C013  FFF8         	movff	??_ISR+12,tblptru
  1475  000836  C012  FFF7         	movff	??_ISR+11,tblptrh
  1476  00083A  C011  FFF6         	movff	??_ISR+10,tblptrl
  1477  00083E  C010  FFF4         	movff	??_ISR+9,prodh
  1478  000842  C00F  FFF3         	movff	??_ISR+8,prodl
  1479  000846  C00E  FFDA         	movff	??_ISR+7,fsr2h
  1480  00084A  C00D  FFD9         	movff	??_ISR+6,fsr2l
  1481  00084E  C00C  FFE2         	movff	??_ISR+5,fsr1h
  1482  000852  C00B  FFE1         	movff	??_ISR+4,fsr1l
  1483  000856  C00A  FFEA         	movff	??_ISR+3,fsr0h
  1484  00085A  C009  FFE9         	movff	??_ISR+2,fsr0l
  1485  00085E  C008  FFFB         	movff	??_ISR+1,pclatu
  1486  000862  C007  FFFA         	movff	??_ISR,pclath
  1487  000866  0011               	retfie		f
  1488  000868                     __end_of_ISR:
  1489                           	opt stack 0
  1490                           pclatu	equ	0xFFB
  1491                           pclath	equ	0xFFA
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           prodh	equ	0xFF4
  1497                           prodl	equ	0xFF3
  1498                           intcon	equ	0xFF2
  1499                           postinc0	equ	0xFEE
  1500                           fsr0h	equ	0xFEA
  1501                           fsr0l	equ	0xFE9
  1502                           wreg	equ	0xFE8
  1503                           fsr1h	equ	0xFE2
  1504                           fsr1l	equ	0xFE1
  1505                           indf2	equ	0xFDF
  1506                           fsr2h	equ	0xFDA
  1507                           fsr2l	equ	0xFD9
  1508                           status	equ	0xFD8
  1509                           
  1510 ;; *************** function i2___awmod *****************
  1511 ;; Defined at:
  1512 ;;		line 8 in file "/Applications/microchip/xc8/v1.34/sources/common/awmod.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  dividend        2    0[COMRAM] int 
  1515 ;;  divisor         2    2[COMRAM] int 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  __awmod         1    5[COMRAM] unsigned char 
  1518 ;;  __awmod         1    4[COMRAM] unsigned char 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  2    0[COMRAM] int 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1528 ;;      Params:         4       0       0       0       0       0       0
  1529 ;;      Locals:         2       0       0       0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0       0       0
  1531 ;;      Totals:         6       0       0       0       0       0       0
  1532 ;;Total ram usage:        6 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_ISR
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text9
  1542  000980                     __ptext9:
  1543                           	opt stack 0
  1544  000980                     i2___awmod:
  1545                           	opt stack 27
  1546                           
  1547                           ;incstack = 0
  1548  000980  0E00               	movlw	0
  1549  000982  6E06               	movwf	i2___awmod@sign,c
  1550  000984  AE02               	btfss	i2___awmod@dividend+1,7,c
  1551  000986  D007               	goto	i2l1036
  1552  000988  6C01               	negf	i2___awmod@dividend,c
  1553  00098A  1E02               	comf	i2___awmod@dividend+1,f,c
  1554  00098C  B0D8               	btfsc	status,0,c
  1555  00098E  2A02               	incf	i2___awmod@dividend+1,f,c
  1556  000990  0E01               	movlw	1
  1557  000992  6E06               	movwf	i2___awmod@sign,c
  1558  000994  D000               	goto	i2l1036
  1559  000996                     i2l1036:
  1560  000996  AE04               	btfss	i2___awmod@divisor+1,7,c
  1561  000998  D005               	goto	i2l1040
  1562  00099A  6C03               	negf	i2___awmod@divisor,c
  1563  00099C  1E04               	comf	i2___awmod@divisor+1,f,c
  1564  00099E  B0D8               	btfsc	status,0,c
  1565  0009A0  2A04               	incf	i2___awmod@divisor+1,f,c
  1566  0009A2  D000               	goto	i2l1040
  1567  0009A4                     i2l1040:
  1568  0009A4  5003               	movf	i2___awmod@divisor,w,c
  1569  0009A6  1004               	iorwf	i2___awmod@divisor+1,w,c
  1570  0009A8  B4D8               	btfsc	status,2,c
  1571  0009AA  D01D               	goto	i2l1056
  1572  0009AC  0E01               	movlw	1
  1573  0009AE  6E05               	movwf	i2___awmod@counter,c
  1574  0009B0  D005               	goto	i2l1046
  1575  0009B2                     i2l1044:
  1576  0009B2  90D8               	bcf	status,0,c
  1577  0009B4  3603               	rlcf	i2___awmod@divisor,f,c
  1578  0009B6  3604               	rlcf	i2___awmod@divisor+1,f,c
  1579  0009B8  2A05               	incf	i2___awmod@counter,f,c
  1580  0009BA  D000               	goto	i2l1046
  1581  0009BC                     i2l1046:
  1582  0009BC  BE04               	btfsc	i2___awmod@divisor+1,7,c
  1583  0009BE  D002               	goto	i2l1048
  1584  0009C0  D7F8               	goto	i2l1044
  1585  0009C2  D000               	goto	i2l1048
  1586  0009C4                     i2l1048:
  1587  0009C4  5003               	movf	i2___awmod@divisor,w,c
  1588  0009C6  5C01               	subwf	i2___awmod@dividend,w,c
  1589  0009C8  5004               	movf	i2___awmod@divisor+1,w,c
  1590  0009CA  5802               	subwfb	i2___awmod@dividend+1,w,c
  1591  0009CC  A0D8               	btfss	status,0,c
  1592  0009CE  D005               	goto	i2l1052
  1593  0009D0  5003               	movf	i2___awmod@divisor,w,c
  1594  0009D2  5E01               	subwf	i2___awmod@dividend,f,c
  1595  0009D4  5004               	movf	i2___awmod@divisor+1,w,c
  1596  0009D6  5A02               	subwfb	i2___awmod@dividend+1,f,c
  1597  0009D8  D000               	goto	i2l1052
  1598  0009DA                     i2l1052:
  1599  0009DA  90D8               	bcf	status,0,c
  1600  0009DC  3204               	rrcf	i2___awmod@divisor+1,f,c
  1601  0009DE  3203               	rrcf	i2___awmod@divisor,f,c
  1602  0009E0  2E05               	decfsz	i2___awmod@counter,f,c
  1603  0009E2  D7F0               	goto	i2l1048
  1604  0009E4  D000               	goto	i2l1056
  1605  0009E6                     i2l1056:
  1606  0009E6  5006               	movf	i2___awmod@sign,w,c
  1607  0009E8  B4D8               	btfsc	status,2,c
  1608  0009EA  D005               	goto	i2l1060
  1609  0009EC  6C01               	negf	i2___awmod@dividend,c
  1610  0009EE  1E02               	comf	i2___awmod@dividend+1,f,c
  1611  0009F0  B0D8               	btfsc	status,0,c
  1612  0009F2  2A02               	incf	i2___awmod@dividend+1,f,c
  1613  0009F4  D000               	goto	i2l1060
  1614  0009F6                     i2l1060:
  1615  0009F6  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  1616  0009FA  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  1617  0009FE  D000               	goto	i2l339
  1618  000A00                     i2l339:
  1619  000A00  0012               	return		;funcret
  1620  000A02                     __end_ofi2___awmod:
  1621                           	opt stack 0
  1622                           pclatu	equ	0xFFB
  1623                           pclath	equ	0xFFA
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           prodh	equ	0xFF4
  1629                           prodl	equ	0xFF3
  1630                           intcon	equ	0xFF2
  1631                           postinc0	equ	0xFEE
  1632                           fsr0h	equ	0xFEA
  1633                           fsr0l	equ	0xFE9
  1634                           wreg	equ	0xFE8
  1635                           fsr1h	equ	0xFE2
  1636                           fsr1l	equ	0xFE1
  1637                           indf2	equ	0xFDF
  1638                           fsr2h	equ	0xFDA
  1639                           fsr2l	equ	0xFD9
  1640                           status	equ	0xFD8
  1641                           
  1642 ;; *************** function _UART_Read *****************
  1643 ;; Defined at:
  1644 ;;		line 162 in file "main.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;		None
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;		None
  1649 ;; Return value:  Size  Location     Type
  1650 ;;                  1    wreg      unsigned char 
  1651 ;; Registers used:
  1652 ;;		wreg, status,2
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1658 ;;      Params:         0       0       0       0       0       0       0
  1659 ;;      Locals:         0       0       0       0       0       0       0
  1660 ;;      Temps:          0       0       0       0       0       0       0
  1661 ;;      Totals:         0       0       0       0       0       0       0
  1662 ;;Total ram usage:        0 bytes
  1663 ;; Hardware stack levels used:    1
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_ISR
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text10
  1672  000B04                     __ptext10:
  1673                           	opt stack 0
  1674  000B04                     _UART_Read:
  1675                           	opt stack 27
  1676                           
  1677                           ;main.c: 164: while(!RCIF);
  1678                           
  1679                           ;incstack = 0
  1680  000B04  D000               	goto	i2l69
  1681  000B06                     i2l69:
  1682  000B06  AA9E               	btfss	3998,5,c	;volatile
  1683  000B08  D7FE               	goto	i2l69
  1684                           
  1685                           ;main.c: 165: return RCREG;
  1686  000B0A  50AE               	movf	4014,w,c	;volatile
  1687  000B0C  D000               	goto	i2l72
  1688  000B0E                     i2l72:
  1689  000B0E  0012               	return		;funcret
  1690  000B10                     __end_of_UART_Read:
  1691                           	opt stack 0
  1692                           pclatu	equ	0xFFB
  1693                           pclath	equ	0xFFA
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           prodh	equ	0xFF4
  1699                           prodl	equ	0xFF3
  1700                           intcon	equ	0xFF2
  1701                           postinc0	equ	0xFEE
  1702                           fsr0h	equ	0xFEA
  1703                           fsr0l	equ	0xFE9
  1704                           wreg	equ	0xFE8
  1705                           fsr1h	equ	0xFE2
  1706                           fsr1l	equ	0xFE1
  1707                           indf2	equ	0xFDF
  1708                           fsr2h	equ	0xFDA
  1709                           fsr2l	equ	0xFD9
  1710                           status	equ	0xFD8
  1711                           pclatu	equ	0xFFB
  1712                           pclath	equ	0xFFA
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           postinc0	equ	0xFEE
  1721                           fsr0h	equ	0xFEA
  1722                           fsr0l	equ	0xFE9
  1723                           wreg	equ	0xFE8
  1724                           fsr1h	equ	0xFE2
  1725                           fsr1l	equ	0xFE1
  1726                           indf2	equ	0xFDF
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731                           	psect	rparam
  1732  0000                     pclatu	equ	0xFFB
  1733                           pclath	equ	0xFFA
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           prodh	equ	0xFF4
  1739                           prodl	equ	0xFF3
  1740                           intcon	equ	0xFF2
  1741                           postinc0	equ	0xFEE
  1742                           fsr0h	equ	0xFEA
  1743                           fsr0l	equ	0xFE9
  1744                           wreg	equ	0xFE8
  1745                           fsr1h	equ	0xFE2
  1746                           fsr1l	equ	0xFE1
  1747                           indf2	equ	0xFDF
  1748                           fsr2h	equ	0xFDA
  1749                           fsr2l	equ	0xFD9
  1750                           status	equ	0xFD8


Data Sizes:
    Strings     80
    Constant    0
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     34      61
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_UART_Write_Text
    _parseMessage->___awmod
    _UART_Write_Text->_UART_Write

Critical Paths under _ISR in COMRAM

    _ISR->i2___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5    2104
                                             27 COMRAM     7     2      5
                    _UART_Write_Text
                            ___awmod
                         _init_IOPin
                         _init_USART
                       _parseMessage
                     _read_id_module
 ---------------------------------------------------------------------------------
 (1) _read_id_module                                       4     2      2      27
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _parseMessage                                         0     0      0     774
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     774
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_USART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_IOPin                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      6     4      2     529
                                             21 COMRAM     6     4      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      15
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 14    14      0     348
                                              6 COMRAM    14    14      0
                          _UART_Read
                          i2___awmod
 ---------------------------------------------------------------------------------
 (4) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Write_Text
     _UART_Write
   ___awmod
   _init_IOPin
   _init_USART
   _parseMessage
     ___awmod
   _read_id_module

 _ISR (ROOT)
   _UART_Read
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     22      3D       1       48.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      15        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed May  6 11:34:23 2015

                      l75 0AFA                        l91 0A94               __CFG_BORV$3 000000  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000               __CFG_OSC$HS 000000                       l101 06CA  
                     l110 0736                       l104 06EE                       l113 075A  
                     l122 07C6                       l107 0712                       l116 077E  
                     l119 07A2                       l339 097E                       l960 0922  
                     l980 0974                       l972 0958                       l964 0930  
                     l956 0914                       l990 0A2E                       l966 093A  
                     l968 0942                       l976 0964                       l986 0A0C  
                     l998 0A60              __CFG_CPB$OFF 000000              __CFG_CPD$OFF 000000  
                     _ISR 0008           _valueBrocheRead 003D                       _iRx 0037  
            ___awmod@sign 001A                       wreg 000FE8          ??_read_id_module 0017  
            __CFG_LVP$OFF 000000                      ?_ISR 0001              __CFG_WDT$OFF 000000  
                    l1010 0A8A                      l1002 0A6E                      l1006 0A7C  
                    l1120 075E                      l1112 073A                      l1104 0716  
                    l1136 07A6                      l1128 0782                      l1074 0668  
                    l1096 06F2                      l1088 06CE                      STR_1 0601  
                    STR_2 060B                      STR_3 0615                      STR_4 061F  
                    STR_5 0629                      STR_6 0633                      STR_7 063D  
                    STR_8 0647                      _RCIF 007CF5                      i2l72 0B0E  
                    i2l69 0B06                      _TRMT 007D61              __CFG_PWRT$ON 000000  
                    _main 0652                      fsr0h 000FEA                      fsr1h 000FE2  
                    fsr0l 000FE9                      fsr2h 000FDA                      fsr1l 000FE1  
                    indf2 000FDF                      fsr2l 000FD9                      pclat 000FFA  
                    prodh 000FF4                      prodl 000FF3                      start 0018  
           __CFG_IESO$OFF 000000             __CFG_MCLRE$ON 000000              ___param_bank 000010  
 __end_of_UART_Write_Text 0A4E                     ??_ISR 0007                     ?_main 001C  
         __end_of___awmod 0980                     i2l130 082E                     i2l339 0A00  
                   _RCREG 000FAE                     _SPBRG 000FAF                     _TXREG 000FAD  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
             ?_UART_Write 0001        __size_of_UART_Read 000C             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000  
                   tablat 000FF5                     status 000FD8        __size_ofi2___awmod 0082  
         __initialization 0AC8              __end_of_main 07CE                    ??_main 0021  
           __activetblptr 000001              _idBrocheRead 003B                    i2l1040 09A4  
                  i2l1060 09F6                    i2l1052 09DA                    i2l1044 09B2  
                  i2l1036 0996                    i2l1046 09BC                    i2l1048 09C4  
                  i2l1056 09E6            __CFG_XINST$OFF 000000         __end_of_UART_Read 0B10  
     __size_of_UART_Write 000E            __CFG_STVREN$ON 000000                 ??___awmod 0019  
        ?_UART_Write_Text 0016                    clear_0 0ACE           ___awmod@divisor 0017  
         ___awmod@counter 0019         __end_ofi2___awmod 0A02              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
          i2___awmod@sign 0006              _idModuleRead 003C                __accesstop 0080  
 __end_of__initialization 0AD4           __CFG_PBADEN$OFF 000000             ?_parseMessage 0001  
           ___rparam_used 000001            __pcstackCOMRAM 0001                _iRxLecture 0039  
         __CFG_LPT1OSC$ON 000000            ??_parseMessage 001B        __CFG_CCP2MX$PORTBE 000000  
            ??_UART_Write 0015                   __Hparam 0000                   __Lparam 0000  
              _init_IOPin 0A96                _init_USART 0AE2                   ___awmod 08FE  
      __end_of_UART_Write 0B04              __psmallconst 0600                   __pcinit 0AC8  
                 __ramtop 0600                   __ptext0 0652                   __ptext1 0A4E  
                 __ptext2 0868                   __ptext3 08FE                   __ptext4 0AE2  
                 __ptext5 0A96                   __ptext6 0A02                   __ptext7 0AF6  
                 __ptext9 0980              __size_of_ISR 0860          read_id_module@id 0017  
        ___awmod@dividend 0015            __pintcode_body 07CE      end_of_initialization 0AD4  
                 int_func 07CE   __size_of_read_id_module 0048                 _RCSTAbits 000FAB  
                 postinc0 000FEE                 _UART_Read 0B04                 _PORTAbits 000F80  
               _PORTBbits 000F81                 _PORTCbits 000F82            UART_Write@data 0015  
    __end_of_parseMessage 08FE                 _TRISAbits 000F92                 _TRISBbits 000F93  
               _TRISCbits 000F94                 i2___awmod 0980                 _TXSTAbits 000FAC  
             ?_init_IOPin 0001               ?_init_USART 0001                ?_UART_Read 0001  
__size_of_UART_Write_Text 004C       start_initialization 0AC8               __end_of_ISR 0868  
              ?i2___awmod 0001               __pbssCOMRAM 0023       __size_of_init_IOPin 0032  
     __size_of_init_USART 0014            _read_id_module 0A4E                 __pintcode 0008  
                ?___awmod 0015     __size_of_parseMessage 0096               ??_UART_Read 0001  
             __smallconst 0600               ??i2___awmod 0005         ??_UART_Write_Text 0018  
  __end_of_read_id_module 0A96              _parseMessage 0868                  _PIE1bits 000F9D  
                _PIR1bits 000F9E          __CFG_WDTPS$32768 000000                _ADCON1bits 000FC1  
      i2___awmod@dividend 0001           ?_read_id_module 0015                  _RxBuffer 0023  
                __Hrparam 0000              ??_init_IOPin 0015              ??_init_USART 0015  
                _TxBuffer 002D                  __Lrparam 0000              __Lsmallconst 0600  
      __CFG_BOREN$SBORDIS 000000          __size_of___awmod 0082                  __ptext10 0B04  
      __end_of_init_IOPin 0AC8        __end_of_init_USART 0AF6       UART_Write_Text@text 0016  
           __size_of_main 017C                  main@argc 001C                  main@argv 001E  
       i2___awmod@divisor 0003         i2___awmod@counter 0005               _OSCTUNEbits 000F9B  
              _INTCONbits 000FF2                  intlevel2 0000                _OSCCONbits 000FD3  
         _UART_Write_Text 0A02                _UART_Write 0AF6          UART_Write_Text@i 001A  
